{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Index \u524d\u8a00 \u5bf9AI\u76f8\u5173\u6280\u672f\u5728\u4fe1\u606f\u5b89\u5168\u9886\u57df\u5185\u8fdb\u884c\u5e94\u7528\u7684\u5b9e\u8df5\u3002 P.S. \u73b0\u9636\u6bb5\u8fd9\u90e8\u5206\u4ea4\u53c9\u9886\u57df\u5185\u7684\u5de5\u4f5c\u786e\u5b9e\u662f\u201c\u6df1\u5751\u201d\uff0c\u4e0d\u8fc7\u8df3\u8fdb\u53bb\u722c\u51fa\u6765\u7684\u8fc7\u7a0b\u4e5f\u662f\u4e00\u79cd\u953b\u70bc\u561b:-) \u53c2\u8003\u8d44\u6599 \u4e3b\u8981\u53c2\u8003\u8d44\u6599\uff1a \u300a\u7f51\u7edc\u5b89\u5168\u4e4b\u673a\u5668\u5b66\u4e60\u300b\uff0c[\u5370\u5ea6] \u7d22\u9a6c\u00b7\u54c8\u5c14\u5fb7\uff08Soma Halder\uff09\uff0c\u65af\u6960\u00b7\u5965\u5179\u5fb7\u7c73\u5c14 \u8457 \u515c\u54e5\u4e09\u90e8\u66f2\uff1a\u300aweb\u5b89\u5168\u4e4b\u673a\u5668\u5b66\u4e60\u5165\u95e8\u300b\u3001\u300aweb\u5b89\u5168\u4e4b\u6df1\u5ea6\u5b66\u4e60\u5b9e\u6218\u300b \u3001\u300aweb\u5b89\u5168\u4e4b\u5f3a\u5316\u5b66\u4e60\u548cGAN\u300b \u4ee3\u7801 \u4ee3\u7801\u5b9e\u73b0\u90e8\u5206\u8bf7\u67e5\u770b\uff1a source \u5176\u4ed6 \u8fd9\u662f\u6211\u7684\u90ae\u7bb1\ud83d\udcee\uff1a contact@y1ng.org \u6b22\u8fce\u4ea4\u6d41\uff01","title":"Index"},{"location":"#index","text":"","title":"Index"},{"location":"#_1","text":"\u5bf9AI\u76f8\u5173\u6280\u672f\u5728\u4fe1\u606f\u5b89\u5168\u9886\u57df\u5185\u8fdb\u884c\u5e94\u7528\u7684\u5b9e\u8df5\u3002 P.S. \u73b0\u9636\u6bb5\u8fd9\u90e8\u5206\u4ea4\u53c9\u9886\u57df\u5185\u7684\u5de5\u4f5c\u786e\u5b9e\u662f\u201c\u6df1\u5751\u201d\uff0c\u4e0d\u8fc7\u8df3\u8fdb\u53bb\u722c\u51fa\u6765\u7684\u8fc7\u7a0b\u4e5f\u662f\u4e00\u79cd\u953b\u70bc\u561b:-)","title":"\u524d\u8a00"},{"location":"#_2","text":"\u4e3b\u8981\u53c2\u8003\u8d44\u6599\uff1a \u300a\u7f51\u7edc\u5b89\u5168\u4e4b\u673a\u5668\u5b66\u4e60\u300b\uff0c[\u5370\u5ea6] \u7d22\u9a6c\u00b7\u54c8\u5c14\u5fb7\uff08Soma Halder\uff09\uff0c\u65af\u6960\u00b7\u5965\u5179\u5fb7\u7c73\u5c14 \u8457 \u515c\u54e5\u4e09\u90e8\u66f2\uff1a\u300aweb\u5b89\u5168\u4e4b\u673a\u5668\u5b66\u4e60\u5165\u95e8\u300b\u3001\u300aweb\u5b89\u5168\u4e4b\u6df1\u5ea6\u5b66\u4e60\u5b9e\u6218\u300b \u3001\u300aweb\u5b89\u5168\u4e4b\u5f3a\u5316\u5b66\u4e60\u548cGAN\u300b","title":"\u53c2\u8003\u8d44\u6599"},{"location":"#_3","text":"\u4ee3\u7801\u5b9e\u73b0\u90e8\u5206\u8bf7\u67e5\u770b\uff1a source","title":"\u4ee3\u7801"},{"location":"#_4","text":"\u8fd9\u662f\u6211\u7684\u90ae\u7bb1\ud83d\udcee\uff1a contact@y1ng.org \u6b22\u8fce\u4ea4\u6d41\uff01","title":"\u5176\u4ed6"},{"location":"0x0_%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","text":"\u76f8\u5173\u57fa\u7840\u77e5\u8bc6 \u673a\u5668\u5b66\u4e60 \u6570\u636e \u7ed3\u6784\u5316\u6570\u636e\u3001\u534a\u7ed3\u6784\u5316\u6570\u636e\u4e0e\u975e\u7ed3\u6784\u5316\u6570\u636e \u7b80\u5355\u7406\u89e3\uff1a\u7ed3\u6784\u5316\u6570\u636e\u662f\u56fa\u5b9a\u952e\u503c\u7684\uff0c\u53d6\u6570\u636e\u4e5f\u662f\u56fa\u5b9a\u952e\u503c\u7684\uff0c\u4f8b\u5982\u5173\u7cfb\u578b\u6570\u636e\u5e93\u8868\uff1b\u534a\u7ed3\u6784\u5316\u6570\u636e\u5c31\u662f\u6709\u952e\u503c\uff0c\u4f46\u4e0d\u56fa\u5b9a\uff0c\u53ef\u7075\u6d3b\u8c03\u6574\u952e\u503c\u6765\u53d6\u6570\u636e\uff0c\u4f8b\u5982JSON\u683c\u5f0f\u6570\u636e\uff1b\u975e\u7ed3\u6784\u5316\u6570\u636e\u5c31\u662f\u8fde\u952e\u503c\u90fd\u6ca1\u6709\u7684\uff0c\u4f8b\u5982\u7eaf\u6587\u672c\u3001\u56fe\u7247\u7b49 \u6807\u8bb0\u6570\u636e\u4e0e\u65e0\u6807\u8bb0\u6570\u636e \u9636\u6bb5\u5212\u5206 \u4ece\u5e94\u7528\u673a\u5668\u5b66\u4e60\u6280\u672f\u89e3\u51b3\u4e1a\u52a1\u95ee\u9898\u7684\u89d2\u5ea6\u51fa\u53d1\uff0c\u53ef\u4ee5\u5206\u4e3a\uff1a \u63d0\u51fa\u95ee\u9898\u2014\u2014\u6570\u636e\u9884\u5904\u7406\u9636\u6bb5\u2014\u2014\u7279\u5f81\u5de5\u7a0b\u9636\u6bb5\u2014\u2014\u6a21\u578b\u6784\u5efa\u548c\u8bc4\u4f30\u9636\u6bb5 \u4ece\u6570\u636e\u5904\u7406\u5b8c\u6210\uff0c\u5230\u540e\u7eed\u5206\u6790\u3001\u5e94\u7528\u9636\u6bb5\uff0c\u53ef\u4ee5\u5206\u4e3a\uff1a \u5206\u6790\u9636\u6bb5\u2014\u2014\u8bad\u7ec3\u9636\u6bb5\u2014\u2014\u6d4b\u8bd5\u9636\u6bb5\u2014\u2014\u5e94\u7528\u9636\u6bb5 \u6570\u636e\u7684\u4e0d\u4e00\u81f4\u6027 \u8fc7\u62df\u5408 \u5206\u6790\u7ed3\u679c\u592a\u9760\u8fd1\u6216\u8005\u7cbe\u786e\u5339\u914d\u4e00\u4e2a\u7279\u5b9a\u7684\u6570\u636e\u96c6\uff0c\u4ece\u800c\u5bfc\u81f4\u65e0\u6cd5\u9002\u7528\u4e8e\u5176\u4ed6\u7684\u6570\u636e\u96c6 \u6b20\u62df\u5408 \u6a21\u578b\u6ca1\u6709\u5f88\u597d\u8bad\u7ec3\uff0c\u5bfc\u81f4\u65b0\u5e74\u53d7\u5f71\u54cd\uff0c\u65e0\u6cd5\u5e94\u7528\u4e8e\u65b0\u7684\u6570\u636e \u89e3\u51b3\u65b9\u6cd5\uff1a \u6570\u636e\u7684\u4ea4\u53c9\u9a8c\u8bc1 \u6570\u636e\u4fee\u526a \u6570\u636e\u7684\u6b63\u5219\u5316\u7b49 \u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u7684\u5206\u7c7b \u6309\u662f\u5426\u9700\u8981\u4eba\u5de5\u53c2\u4e0e\u6570\u636e\u96c6\u7684\u6807\u6ce8\uff0c\u5206\u4e3a\uff1a \u76d1\u7763\u5b66\u4e60 \u7ed9\u8bad\u7ec3\u6570\u636e\u6253\u4e0a\u6807\u7b7e\uff0c\u4ece\u8bad\u7ec3\u6570\u636e\u4e2d\u53bb\u63a8\u5bfc\u51fa \u9884\u6d4b\u51fd\u6570 \uff0c\u7136\u540e\u7528\u8fd9\u4e2a\u51fd\u6570\u53bb \u9884\u6d4b\u6570\u636e\u7684\u6807\u7b7e \u3002 \u65e0\u76d1\u7763\u5b66\u4e60 \u4e0d\u9700\u8981\u7ed9\u8bad\u7ec3\u6570\u636e\u6253\u4e0a\u6807\u7b7e\uff0c\u4ece\u8bad\u7ec3\u6570\u636e\u4e2d\u53bb\u627e\u5230\u9690\u85cf\u7684\u6a21\u5f0f\u548c\u5206\u7ec4\u65b9\u6cd5\uff0c\u7136\u540e\u7528\u8fd9\u4e2a\u6765 \u627e\u6570\u636e\u7684\u9690\u85cf\u7ed3\u6784 \u4ece\u5176\u4ed6\u89d2\u5ea6\u5bf9\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u8fdb\u884c\u5206\u7c7b\u7684\u65b9\u6cd5\u4e5f\u8f83\u591a\uff0c\u6bd4\u5982\u4ece\u89e3\u51b3\u95ee\u9898\u7684\u7c7b\u578b\u51fa\u53d1\u8fdb\u884c\u5206\u7c7b\uff0c\u53ef\u4ee5\u6709\uff1a\u5206\u7c7b\u3001\u805a\u7c7b\u3001\u56de\u5f52\u3001\u964d\u7ef4\u548c\u5bc6\u5ea6\u4f30\u8ba1\u7b49\uff0c\u6682\u4e0d\u5c55\u5f00\u3002 \u5e38\u7528\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5 \u652f\u6301\u5411\u91cf\u673a\uff08SVM\uff09 \u8d1d\u53f6\u65af\u7f51\u7edc\uff08BN\uff09 \u51b3\u7b56\u6811 \u968f\u673a\u68ee\u6797 \u5206\u5c42\u7b97\u6cd5/\u5206\u5c42\u805a\u7c7b\u7b97\u6cd5\uff08HCA\uff09 \u9057\u4f20\u7b97\u6cd5 \u76f8\u4f3c\u5ea6\u7b97\u6cd5 \u4eba\u5de5\u795e\u7ecf\u7f51\u7edc \u673a\u5668\u5b66\u4e60\u7684\u5e38\u7528\u67b6\u6784 \u56fe\uff1a\u5178\u578b\u673a\u5668\u5b66\u4e60\u7cfb\u7edf\u67b6\u6784 \u6570\u636e\u63d0\u53d6 \u6570\u636e\u5b58\u50a8 \u6a21\u578b\u5f15\u64ce \u6570\u636e\u51c6\u5907 \u7279\u5f81\u751f\u6210 \u8bad\u7ec3 \u6d4b\u8bd5 \u6027\u80fd\u8c03\u6574 \u5747\u65b9\u8bef\u5dee \u5e73\u5747\u7edd\u5bf9\u8bef\u5dee \u7cbe\u786e\u7387\u3001\u53ec\u56de\u7387\u548c\u51c6\u786e\u7387 \u6a21\u578b\u6027\u80fd\u63d0\u5347\u65b9\u6cd5 \u83b7\u53d6\u66f4\u591a\u6570\u636e \u5207\u6362\u673a\u5668\u5b66\u4e60\u7b97\u6cd5 \u96c6\u6210\u591a\u79cd\u7b97\u6cd5 \u76f8\u5173\u5de5\u5177\u548c\u5e93 Jupyter NumPy SciPy scikit-learn pandas Matplotlib \u673a\u5668\u5b66\u4e60\u73af\u5883\u914d\u7f6e \u4f7f\u7528sklearn\u81ea\u5e26\u7684\u7cd6\u5c3f\u75c5\u4eba\u6570\u636e\u96c6\u8fdb\u884c\u673a\u5668\u5b66\u4e60\u73af\u5883\u914d\u7f6e\u7684\u6d4b\u8bd5\uff0c\u4ee3\u7801\u6587\u4ef6\u4e3a\uff1a ~/source/for_env_test.py \uff0c\u5982\u4e0b\uff1a \"\"\" Author\uff1aToky Function\uff1a \u673a\u5668\u5b66\u4e60\u73af\u5883\u6d4b\u8bd5 \"\"\" import numpy as np from sklearn import datasets , linear_model from sklearn.metrics import mean_squared_error , r2_score import matplotlib.pyplot as plt if __name__ == '__main__' : # \u5bfc\u5165\u7cd6\u5c3f\u75c5\u6570\u636e\uff08sklearn\u81ea\u5e26\uff09 diabetes = datasets . load_diabetes () \"\"\" \u5c55\u793a\u6570\u636e\u96c6\u57fa\u672c\u4fe1\u606f \"\"\" # # \u5c55\u793a\u6570\u636e\u96c6\u7684\u884c\u6570\u548c\u7279\u5f81\u7ef4\u5ea6\u6570\u91cf # print(diabetes.data.shape) # print(diabetes.feature_names) # # \u5c55\u793a\u6570\u636e\u96c6\u63cf\u8ff0 # print(diabetes.DESCR) \"\"\" \u9009\u53d6\u6240\u9700\u7684\u7279\u5f81\uff08\u672c\u6b21\u6d4b\u8bd5\u4f7f\u7528\u4e2a\u4eba\u7684BMI\u6307\u6570\u4f5c\u4e3a\u7279\u5f81\uff09 \"\"\" diabetes_X = diabetes . data [:, np . newaxis , 3 ] # print(diabetes_X) \"\"\" \u5212\u5206\u6570\u636e\u4e3a\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6 \"\"\" # \u4fdd\u7559\u6700\u540e20\u4e2a\u8fdb\u884c\u6d4b\u8bd5 diabetes_X_train = diabetes_X [: - 20 ] diabetes_X_test = diabetes_X [ - 20 :] diabetes_y_train = diabetes . target [: - 20 ] diabetes_y_test = diabetes . target [ - 20 :] \"\"\" \u8bad\u7ec3\u6a21\u578b\uff1a\u7528\u8bad\u7ec3\u96c6\u6570\u636e\u62df\u5408\u6a21\u578b \u6d4b\u8bd5\u6a21\u578b\uff1a\u7528\u6d4b\u8bd5\u96c6\u6570\u636e\u8fdb\u884c\u9884\u6d4b \"\"\" # \u521b\u5efa\u7ebf\u6027\u56de\u5f52\u6a21\u578b regr = linear_model . LinearRegression () # \u4f7f\u7528\u8bad\u7ec3\u96c6\u6570\u636e\u8bad\u7ec3\u6a21\u578b regr . fit ( diabetes_X_train , diabetes_y_train ) # \u4f7f\u7528\u6d4b\u8bd5\u96c6\u9884\u6d4b\u6807\u7b7e diabetes_y_pred = regr . predict ( diabetes_X_test ) \"\"\" \u901a\u8fc7\u5747\u65b9\u8bef\u5dee\u548c\u65b9\u5dee\u8bef\u5dee\u7684\u5927\u5c0f\u6765\u8ba1\u7b97\u62df\u5408\u5ea6 \"\"\" mean_squared_error_value = mean_squared_error ( diabetes_y_test , diabetes_y_pred ) print ( \"\u5747\u65b9\u8bef\u5dee\u4e3a\uff1a {0} \" . format ( mean_squared_error_value )) r2_score_value = r2_score ( diabetes_y_test , diabetes_y_pred ) print ( \"\u65b9\u5dee\u8bef\u5dee\u4e3a\uff1a {0} \" . format ( r2_score_value )) \"\"\" \u7ed8\u5236\u53ef\u89c6\u5316\u7684\u9884\u6d4b\u7ed3\u679c \"\"\" plt . scatter ( diabetes_X_test , diabetes_y_test , color = \"black\" ) plt . plot ( diabetes_X_test , diabetes_y_pred , color = \"blue\" , linewidth = 3 ) plt . xticks (()) plt . yticks (()) plt . show () \u56fe\uff1a\u9884\u6d4b\u7ed3\u679c \u5747\u65b9\u8bef\u5dee\u4e3a\uff1a4058.4102891387315 \u65b9\u5dee\u8bef\u5dee\u4e3a\uff1a0.15995117339547205","title":"\u76f8\u5173\u57fa\u7840\u77e5\u8bc6"},{"location":"0x0_%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_1","text":"","title":"\u76f8\u5173\u57fa\u7840\u77e5\u8bc6"},{"location":"0x0_%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_2","text":"","title":"\u673a\u5668\u5b66\u4e60"},{"location":"0x0_%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_3","text":"\u7ed3\u6784\u5316\u6570\u636e\u3001\u534a\u7ed3\u6784\u5316\u6570\u636e\u4e0e\u975e\u7ed3\u6784\u5316\u6570\u636e \u7b80\u5355\u7406\u89e3\uff1a\u7ed3\u6784\u5316\u6570\u636e\u662f\u56fa\u5b9a\u952e\u503c\u7684\uff0c\u53d6\u6570\u636e\u4e5f\u662f\u56fa\u5b9a\u952e\u503c\u7684\uff0c\u4f8b\u5982\u5173\u7cfb\u578b\u6570\u636e\u5e93\u8868\uff1b\u534a\u7ed3\u6784\u5316\u6570\u636e\u5c31\u662f\u6709\u952e\u503c\uff0c\u4f46\u4e0d\u56fa\u5b9a\uff0c\u53ef\u7075\u6d3b\u8c03\u6574\u952e\u503c\u6765\u53d6\u6570\u636e\uff0c\u4f8b\u5982JSON\u683c\u5f0f\u6570\u636e\uff1b\u975e\u7ed3\u6784\u5316\u6570\u636e\u5c31\u662f\u8fde\u952e\u503c\u90fd\u6ca1\u6709\u7684\uff0c\u4f8b\u5982\u7eaf\u6587\u672c\u3001\u56fe\u7247\u7b49 \u6807\u8bb0\u6570\u636e\u4e0e\u65e0\u6807\u8bb0\u6570\u636e","title":"\u6570\u636e"},{"location":"0x0_%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_4","text":"\u4ece\u5e94\u7528\u673a\u5668\u5b66\u4e60\u6280\u672f\u89e3\u51b3\u4e1a\u52a1\u95ee\u9898\u7684\u89d2\u5ea6\u51fa\u53d1\uff0c\u53ef\u4ee5\u5206\u4e3a\uff1a \u63d0\u51fa\u95ee\u9898\u2014\u2014\u6570\u636e\u9884\u5904\u7406\u9636\u6bb5\u2014\u2014\u7279\u5f81\u5de5\u7a0b\u9636\u6bb5\u2014\u2014\u6a21\u578b\u6784\u5efa\u548c\u8bc4\u4f30\u9636\u6bb5 \u4ece\u6570\u636e\u5904\u7406\u5b8c\u6210\uff0c\u5230\u540e\u7eed\u5206\u6790\u3001\u5e94\u7528\u9636\u6bb5\uff0c\u53ef\u4ee5\u5206\u4e3a\uff1a \u5206\u6790\u9636\u6bb5\u2014\u2014\u8bad\u7ec3\u9636\u6bb5\u2014\u2014\u6d4b\u8bd5\u9636\u6bb5\u2014\u2014\u5e94\u7528\u9636\u6bb5","title":"\u9636\u6bb5\u5212\u5206"},{"location":"0x0_%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_5","text":"\u8fc7\u62df\u5408 \u5206\u6790\u7ed3\u679c\u592a\u9760\u8fd1\u6216\u8005\u7cbe\u786e\u5339\u914d\u4e00\u4e2a\u7279\u5b9a\u7684\u6570\u636e\u96c6\uff0c\u4ece\u800c\u5bfc\u81f4\u65e0\u6cd5\u9002\u7528\u4e8e\u5176\u4ed6\u7684\u6570\u636e\u96c6 \u6b20\u62df\u5408 \u6a21\u578b\u6ca1\u6709\u5f88\u597d\u8bad\u7ec3\uff0c\u5bfc\u81f4\u65b0\u5e74\u53d7\u5f71\u54cd\uff0c\u65e0\u6cd5\u5e94\u7528\u4e8e\u65b0\u7684\u6570\u636e \u89e3\u51b3\u65b9\u6cd5\uff1a \u6570\u636e\u7684\u4ea4\u53c9\u9a8c\u8bc1 \u6570\u636e\u4fee\u526a \u6570\u636e\u7684\u6b63\u5219\u5316\u7b49","title":"\u6570\u636e\u7684\u4e0d\u4e00\u81f4\u6027"},{"location":"0x0_%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_6","text":"\u6309\u662f\u5426\u9700\u8981\u4eba\u5de5\u53c2\u4e0e\u6570\u636e\u96c6\u7684\u6807\u6ce8\uff0c\u5206\u4e3a\uff1a \u76d1\u7763\u5b66\u4e60 \u7ed9\u8bad\u7ec3\u6570\u636e\u6253\u4e0a\u6807\u7b7e\uff0c\u4ece\u8bad\u7ec3\u6570\u636e\u4e2d\u53bb\u63a8\u5bfc\u51fa \u9884\u6d4b\u51fd\u6570 \uff0c\u7136\u540e\u7528\u8fd9\u4e2a\u51fd\u6570\u53bb \u9884\u6d4b\u6570\u636e\u7684\u6807\u7b7e \u3002 \u65e0\u76d1\u7763\u5b66\u4e60 \u4e0d\u9700\u8981\u7ed9\u8bad\u7ec3\u6570\u636e\u6253\u4e0a\u6807\u7b7e\uff0c\u4ece\u8bad\u7ec3\u6570\u636e\u4e2d\u53bb\u627e\u5230\u9690\u85cf\u7684\u6a21\u5f0f\u548c\u5206\u7ec4\u65b9\u6cd5\uff0c\u7136\u540e\u7528\u8fd9\u4e2a\u6765 \u627e\u6570\u636e\u7684\u9690\u85cf\u7ed3\u6784 \u4ece\u5176\u4ed6\u89d2\u5ea6\u5bf9\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u8fdb\u884c\u5206\u7c7b\u7684\u65b9\u6cd5\u4e5f\u8f83\u591a\uff0c\u6bd4\u5982\u4ece\u89e3\u51b3\u95ee\u9898\u7684\u7c7b\u578b\u51fa\u53d1\u8fdb\u884c\u5206\u7c7b\uff0c\u53ef\u4ee5\u6709\uff1a\u5206\u7c7b\u3001\u805a\u7c7b\u3001\u56de\u5f52\u3001\u964d\u7ef4\u548c\u5bc6\u5ea6\u4f30\u8ba1\u7b49\uff0c\u6682\u4e0d\u5c55\u5f00\u3002","title":"\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u7684\u5206\u7c7b"},{"location":"0x0_%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_7","text":"\u652f\u6301\u5411\u91cf\u673a\uff08SVM\uff09 \u8d1d\u53f6\u65af\u7f51\u7edc\uff08BN\uff09 \u51b3\u7b56\u6811 \u968f\u673a\u68ee\u6797 \u5206\u5c42\u7b97\u6cd5/\u5206\u5c42\u805a\u7c7b\u7b97\u6cd5\uff08HCA\uff09 \u9057\u4f20\u7b97\u6cd5 \u76f8\u4f3c\u5ea6\u7b97\u6cd5 \u4eba\u5de5\u795e\u7ecf\u7f51\u7edc","title":"\u5e38\u7528\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5"},{"location":"0x0_%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_8","text":"\u56fe\uff1a\u5178\u578b\u673a\u5668\u5b66\u4e60\u7cfb\u7edf\u67b6\u6784 \u6570\u636e\u63d0\u53d6 \u6570\u636e\u5b58\u50a8 \u6a21\u578b\u5f15\u64ce \u6570\u636e\u51c6\u5907 \u7279\u5f81\u751f\u6210 \u8bad\u7ec3 \u6d4b\u8bd5 \u6027\u80fd\u8c03\u6574 \u5747\u65b9\u8bef\u5dee \u5e73\u5747\u7edd\u5bf9\u8bef\u5dee \u7cbe\u786e\u7387\u3001\u53ec\u56de\u7387\u548c\u51c6\u786e\u7387","title":"\u673a\u5668\u5b66\u4e60\u7684\u5e38\u7528\u67b6\u6784"},{"location":"0x0_%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_9","text":"\u83b7\u53d6\u66f4\u591a\u6570\u636e \u5207\u6362\u673a\u5668\u5b66\u4e60\u7b97\u6cd5 \u96c6\u6210\u591a\u79cd\u7b97\u6cd5","title":"\u6a21\u578b\u6027\u80fd\u63d0\u5347\u65b9\u6cd5"},{"location":"0x0_%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_10","text":"Jupyter NumPy SciPy scikit-learn pandas Matplotlib","title":"\u76f8\u5173\u5de5\u5177\u548c\u5e93"},{"location":"0x0_%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_11","text":"\u4f7f\u7528sklearn\u81ea\u5e26\u7684\u7cd6\u5c3f\u75c5\u4eba\u6570\u636e\u96c6\u8fdb\u884c\u673a\u5668\u5b66\u4e60\u73af\u5883\u914d\u7f6e\u7684\u6d4b\u8bd5\uff0c\u4ee3\u7801\u6587\u4ef6\u4e3a\uff1a ~/source/for_env_test.py \uff0c\u5982\u4e0b\uff1a \"\"\" Author\uff1aToky Function\uff1a \u673a\u5668\u5b66\u4e60\u73af\u5883\u6d4b\u8bd5 \"\"\" import numpy as np from sklearn import datasets , linear_model from sklearn.metrics import mean_squared_error , r2_score import matplotlib.pyplot as plt if __name__ == '__main__' : # \u5bfc\u5165\u7cd6\u5c3f\u75c5\u6570\u636e\uff08sklearn\u81ea\u5e26\uff09 diabetes = datasets . load_diabetes () \"\"\" \u5c55\u793a\u6570\u636e\u96c6\u57fa\u672c\u4fe1\u606f \"\"\" # # \u5c55\u793a\u6570\u636e\u96c6\u7684\u884c\u6570\u548c\u7279\u5f81\u7ef4\u5ea6\u6570\u91cf # print(diabetes.data.shape) # print(diabetes.feature_names) # # \u5c55\u793a\u6570\u636e\u96c6\u63cf\u8ff0 # print(diabetes.DESCR) \"\"\" \u9009\u53d6\u6240\u9700\u7684\u7279\u5f81\uff08\u672c\u6b21\u6d4b\u8bd5\u4f7f\u7528\u4e2a\u4eba\u7684BMI\u6307\u6570\u4f5c\u4e3a\u7279\u5f81\uff09 \"\"\" diabetes_X = diabetes . data [:, np . newaxis , 3 ] # print(diabetes_X) \"\"\" \u5212\u5206\u6570\u636e\u4e3a\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6 \"\"\" # \u4fdd\u7559\u6700\u540e20\u4e2a\u8fdb\u884c\u6d4b\u8bd5 diabetes_X_train = diabetes_X [: - 20 ] diabetes_X_test = diabetes_X [ - 20 :] diabetes_y_train = diabetes . target [: - 20 ] diabetes_y_test = diabetes . target [ - 20 :] \"\"\" \u8bad\u7ec3\u6a21\u578b\uff1a\u7528\u8bad\u7ec3\u96c6\u6570\u636e\u62df\u5408\u6a21\u578b \u6d4b\u8bd5\u6a21\u578b\uff1a\u7528\u6d4b\u8bd5\u96c6\u6570\u636e\u8fdb\u884c\u9884\u6d4b \"\"\" # \u521b\u5efa\u7ebf\u6027\u56de\u5f52\u6a21\u578b regr = linear_model . LinearRegression () # \u4f7f\u7528\u8bad\u7ec3\u96c6\u6570\u636e\u8bad\u7ec3\u6a21\u578b regr . fit ( diabetes_X_train , diabetes_y_train ) # \u4f7f\u7528\u6d4b\u8bd5\u96c6\u9884\u6d4b\u6807\u7b7e diabetes_y_pred = regr . predict ( diabetes_X_test ) \"\"\" \u901a\u8fc7\u5747\u65b9\u8bef\u5dee\u548c\u65b9\u5dee\u8bef\u5dee\u7684\u5927\u5c0f\u6765\u8ba1\u7b97\u62df\u5408\u5ea6 \"\"\" mean_squared_error_value = mean_squared_error ( diabetes_y_test , diabetes_y_pred ) print ( \"\u5747\u65b9\u8bef\u5dee\u4e3a\uff1a {0} \" . format ( mean_squared_error_value )) r2_score_value = r2_score ( diabetes_y_test , diabetes_y_pred ) print ( \"\u65b9\u5dee\u8bef\u5dee\u4e3a\uff1a {0} \" . format ( r2_score_value )) \"\"\" \u7ed8\u5236\u53ef\u89c6\u5316\u7684\u9884\u6d4b\u7ed3\u679c \"\"\" plt . scatter ( diabetes_X_test , diabetes_y_test , color = \"black\" ) plt . plot ( diabetes_X_test , diabetes_y_pred , color = \"blue\" , linewidth = 3 ) plt . xticks (()) plt . yticks (()) plt . show () \u56fe\uff1a\u9884\u6d4b\u7ed3\u679c \u5747\u65b9\u8bef\u5dee\u4e3a\uff1a4058.4102891387315 \u65b9\u5dee\u8bef\u5dee\u4e3a\uff1a0.15995117339547205","title":"\u673a\u5668\u5b66\u4e60\u73af\u5883\u914d\u7f6e"},{"location":"0x1_%E5%9F%BA%E4%BA%8Ekmeans%E7%9A%84%E7%BD%91%E7%BB%9C%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/","text":"\u57fa\u4e8ek-means\u7684\u7f51\u7edc\u5f02\u5e38\u901a\u8baf\u68c0\u6d4b \u63d0\u51fa\u95ee\u9898 \u9996\u5148\u6211\u4eec\u9700\u8981\u5c06\u5b89\u5168\u95ee\u9898\u8fdb\u884c\u62bd\u8c61\uff0c\u4e5f\u5c31\u662f\u9488\u5bf9\u73b0\u72b6\u63d0\u51fa\u95ee\u9898\u3002\u5728\u5047\u5b9a\u7684\u8fd9\u4e2a\u4e1a\u52a1\u80cc\u666f\u4e0b\uff0c\u6211\u4eec\u53d1\u73b0\uff1a \u7f51\u7edc\u6570\u636e\u91cf\u5927\uff0c\u4e14\u901a\u8baf\u6570\u636e\u590d\u6742\uff0c\u4e0d\u4fbf\u4e8e\u4eba\u5de5\u9009\u53d6\u6837\u672c\u8fdb\u884c\u6253\u6807 \u653b\u51fb\u65b9\u5f0f\u590d\u6742\uff0c\u6bcf\u6b21\u653b\u51fb\u7684\u53d8\u5316\u8f83\u591a \u6b63\u5e38\u7f51\u7edc\u901a\u8baf\u6d41\u91cf\u5b58\u5728\u4e00\u5b9a\u7684\u56fa\u6709\u6a21\u5f0f \u7efc\u5408\u4e0a\u8ff0\u7684\u4e1a\u52a1\u80cc\u666f\u548c\u6570\u636e\u5927\u6982\u7279\u5f81\uff0c\u9009\u62e9\u65e0\u76d1\u7763\u65b9\u6cd5\u8fdb\u884c\u68c0\u6d4b\u3002\u672c\u6b21\u5b9e\u8df5\u9009\u7528k-means\u7b97\u6cd5\u3002 \u6570\u636e\u5904\u7406 \u6837\u672c\u9009\u62e9 \u672c\u6b21\u5b9e\u8df5\u9009\u62e9\u7684\u6837\u672c\u6570\u636e\u4e3a\u201cKDD Cup 1999\u6570\u636e\uff0c\u6570\u636e\u5927\u5c0f\u7ea6708MB\uff0c\u5305\u542b490\u4e07\u4e2a\u7f51\u7edc\u8fde\u63a5\u201d\uff0c \u5b98\u65b9\u94fe\u63a5 \u3002 \u5176\u4e2d\u5b98\u65b9\u7ed9\u51fa\u7684\u7279\u5f81\u7ef4\u5ea6\u517138\u4e2a\uff0c\u4e3a\uff1a back,buffer_overflow,ftp_write,guess_passwd,imap,ipsweep,land,loadmodule,multihop,neptune,nmap,normal,perl,phf,pod,portsweep,rootkit,satan,smurf,spy,teardrop,warezclient,warezmaster. duration: continuous. protocol_type: symbolic. service: symbolic. flag: symbolic. src_bytes: continuous. dst_bytes: continuous. land: symbolic. wrong_fragment: continuous. urgent: continuous. hot: continuous. num_failed_logins: continuous. logged_in: symbolic. num_compromised: continuous. root_shell: continuous. su_attempted: continuous. num_root: continuous. num_file_creations: continuous. num_shells: continuous. num_access_files: continuous. num_outbound_cmds: continuous. is_host_login: symbolic. is_guest_login: symbolic. count: continuous. srv_count: continuous. serror_rate: continuous. srv_serror_rate: continuous. rerror_rate: continuous. srv_rerror_rate: continuous. same_srv_rate: continuous. diff_srv_rate: continuous. srv_diff_host_rate: continuous. dst_host_count: continuous. dst_host_srv_count: continuous. dst_host_same_srv_rate: continuous. dst_host_diff_srv_rate: continuous. dst_host_same_src_port_rate: continuous. dst_host_srv_diff_host_rate: continuous. dst_host_serror_rate: continuous. dst_host_srv_serror_rate: continuous. dst_host_rerror_rate: continuous. dst_host_srv_rerror_rate: continuous. \u90e8\u5206\u6570\u636e\u5982\u4e0b\uff1a 0 ,tcp,http,SF,215,45076,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0.00,0.00,0.00,0.00,1.00,0.00,0.00,0,0,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,normal. 0 ,tcp,http,SF,162,4528,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,2,0.00,0.00,0.00,0.00,1.00,0.00,0.00,1,1,1.00,0.00,1.00,0.00,0.00,0.00,0.00,0.00,normal. 0 ,tcp,http,SF,236,1228,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0.00,0.00,0.00,0.00,1.00,0.00,0.00,2,2,1.00,0.00,0.50,0.00,0.00,0.00,0.00,0.00,normal. 0 ,tcp,http,SF,233,2032,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,2,0.00,0.00,0.00,0.00,1.00,0.00,0.00,3,3,1.00,0.00,0.33,0.00,0.00,0.00,0.00,0.00,normal. 0 ,tcp,http,SF,239,486,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,3,3,0.00,0.00,0.00,0.00,1.00,0.00,0.00,4,4,1.00,0.00,0.25,0.00,0.00,0.00,0.00,0.00,normal. 0 ,tcp,http,SF,238,1282,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,4,4,0.00,0.00,0.00,0.00,1.00,0.00,0.00,5,5,1.00,0.00,0.20,0.00,0.00,0.00,0.00,0.00,normal. 0 ,tcp,http,SF,235,1337,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,5,5,0.00,0.00,0.00,0.00,1.00,0.00,0.00,6,6,1.00,0.00,0.17,0.00,0.00,0.00,0.00,0.00,normal. 0 ,tcp,http,SF,234,1364,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,6,6,0.00,0.00,0.00,0.00,1.00,0.00,0.00,7,7,1.00,0.00,0.14,0.00,0.00,0.00,0.00,0.00,normal. 0 ,tcp,http,SF,239,1295,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,7,7,0.00,0.00,0.00,0.00,1.00,0.00,0.00,8,8,1.00,0.00,0.12,0.00,0.00,0.00,0.00,0.00,normal. 0 ,tcp,http,SF,181,5450,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,8,8,0.00,0.00,0.00,0.00,1.00,0.00,0.00,9,9,1.00,0.00,0.11,0.00,0.00,0.00,0.00,0.00,normal. 0 ,tcp,http,SF,184,124,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0.00,0.00,0.00,0.00,1.00,0.00,0.00,10,10,1.00,0.00,0.10,0.00,0.00,0.00,0.00,0.00,normal. 0 ,tcp,http,SF,185,9020,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,2,0.00,0.00,0.00,0.00,1.00,0.00,0.00,11,11,1.00,0.00,0.09,0.00,0.00,0.00,0.00,0.00,normal. 0 ,tcp,http,SF,239,1295,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0.00,0.00,0.00,0.00,1.00,0.00,0.00,12,12,1.00,0.00,0.08,0.00,0.00,0.00,0.00,0.00,normal. 0 ,tcp,http,SF,181,5450,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,2,0.00,0.00,0.00,0.00,1.00,0.00,0.00,13,13,1.00,0.00,0.08,0.00,0.00,0.00,0.00,0.00,normal. 0 ,tcp,http,SF,236,1228,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,3,3,0.00,0.00,0.00,0.00,1.00,0.00,0.00,14,14,1.00,0.00,0.07,0.00,0.00,0.00,0.00,0.00,normal. 0 ,tcp,http,SF,233,2032,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,4,4,0.00,0.00,0.00,0.00,1.00,0.00,0.00,15,15,1.00,0.00,0.07,0.00,0.00,0.00,0.00,0.00,normal. \u6807\u7b7e\u5254\u9664 \u7531\u4e8e\u672c\u6b21\u5b9e\u8df5\u91c7\u7528\u7684\u6570\u636e\u96c6\u5df2\u7ecf\u542b\u6709\u6807\u7b7e\u5185\u5bb9\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5148\u5254\u9664\u6807\u7b7e\u3002 \u7279\u5f81\u5de5\u7a0b // ToDO \u6a21\u578b\u9009\u62e9 // ToDO \u6548\u679c\u8bc4\u4f30 // ToDO","title":"\u57fa\u4e8ek-means\u7684\u7f51\u7edc\u5f02\u5e38\u901a\u8baf\u68c0\u6d4b"},{"location":"0x1_%E5%9F%BA%E4%BA%8Ekmeans%E7%9A%84%E7%BD%91%E7%BB%9C%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/#k-means","text":"","title":"\u57fa\u4e8ek-means\u7684\u7f51\u7edc\u5f02\u5e38\u901a\u8baf\u68c0\u6d4b"},{"location":"0x1_%E5%9F%BA%E4%BA%8Ekmeans%E7%9A%84%E7%BD%91%E7%BB%9C%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/#_1","text":"\u9996\u5148\u6211\u4eec\u9700\u8981\u5c06\u5b89\u5168\u95ee\u9898\u8fdb\u884c\u62bd\u8c61\uff0c\u4e5f\u5c31\u662f\u9488\u5bf9\u73b0\u72b6\u63d0\u51fa\u95ee\u9898\u3002\u5728\u5047\u5b9a\u7684\u8fd9\u4e2a\u4e1a\u52a1\u80cc\u666f\u4e0b\uff0c\u6211\u4eec\u53d1\u73b0\uff1a \u7f51\u7edc\u6570\u636e\u91cf\u5927\uff0c\u4e14\u901a\u8baf\u6570\u636e\u590d\u6742\uff0c\u4e0d\u4fbf\u4e8e\u4eba\u5de5\u9009\u53d6\u6837\u672c\u8fdb\u884c\u6253\u6807 \u653b\u51fb\u65b9\u5f0f\u590d\u6742\uff0c\u6bcf\u6b21\u653b\u51fb\u7684\u53d8\u5316\u8f83\u591a \u6b63\u5e38\u7f51\u7edc\u901a\u8baf\u6d41\u91cf\u5b58\u5728\u4e00\u5b9a\u7684\u56fa\u6709\u6a21\u5f0f \u7efc\u5408\u4e0a\u8ff0\u7684\u4e1a\u52a1\u80cc\u666f\u548c\u6570\u636e\u5927\u6982\u7279\u5f81\uff0c\u9009\u62e9\u65e0\u76d1\u7763\u65b9\u6cd5\u8fdb\u884c\u68c0\u6d4b\u3002\u672c\u6b21\u5b9e\u8df5\u9009\u7528k-means\u7b97\u6cd5\u3002","title":"\u63d0\u51fa\u95ee\u9898"},{"location":"0x1_%E5%9F%BA%E4%BA%8Ekmeans%E7%9A%84%E7%BD%91%E7%BB%9C%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/#_2","text":"","title":"\u6570\u636e\u5904\u7406"},{"location":"0x1_%E5%9F%BA%E4%BA%8Ekmeans%E7%9A%84%E7%BD%91%E7%BB%9C%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/#_3","text":"\u672c\u6b21\u5b9e\u8df5\u9009\u62e9\u7684\u6837\u672c\u6570\u636e\u4e3a\u201cKDD Cup 1999\u6570\u636e\uff0c\u6570\u636e\u5927\u5c0f\u7ea6708MB\uff0c\u5305\u542b490\u4e07\u4e2a\u7f51\u7edc\u8fde\u63a5\u201d\uff0c \u5b98\u65b9\u94fe\u63a5 \u3002 \u5176\u4e2d\u5b98\u65b9\u7ed9\u51fa\u7684\u7279\u5f81\u7ef4\u5ea6\u517138\u4e2a\uff0c\u4e3a\uff1a back,buffer_overflow,ftp_write,guess_passwd,imap,ipsweep,land,loadmodule,multihop,neptune,nmap,normal,perl,phf,pod,portsweep,rootkit,satan,smurf,spy,teardrop,warezclient,warezmaster. duration: continuous. protocol_type: symbolic. service: symbolic. flag: symbolic. src_bytes: continuous. dst_bytes: continuous. land: symbolic. wrong_fragment: continuous. urgent: continuous. hot: continuous. num_failed_logins: continuous. logged_in: symbolic. num_compromised: continuous. root_shell: continuous. su_attempted: continuous. num_root: continuous. num_file_creations: continuous. num_shells: continuous. num_access_files: continuous. num_outbound_cmds: continuous. is_host_login: symbolic. is_guest_login: symbolic. count: continuous. srv_count: continuous. serror_rate: continuous. srv_serror_rate: continuous. rerror_rate: continuous. srv_rerror_rate: continuous. same_srv_rate: continuous. diff_srv_rate: continuous. srv_diff_host_rate: continuous. dst_host_count: continuous. dst_host_srv_count: continuous. dst_host_same_srv_rate: continuous. dst_host_diff_srv_rate: continuous. dst_host_same_src_port_rate: continuous. dst_host_srv_diff_host_rate: continuous. dst_host_serror_rate: continuous. dst_host_srv_serror_rate: continuous. dst_host_rerror_rate: continuous. dst_host_srv_rerror_rate: continuous. \u90e8\u5206\u6570\u636e\u5982\u4e0b\uff1a 0 ,tcp,http,SF,215,45076,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0.00,0.00,0.00,0.00,1.00,0.00,0.00,0,0,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,normal. 0 ,tcp,http,SF,162,4528,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,2,0.00,0.00,0.00,0.00,1.00,0.00,0.00,1,1,1.00,0.00,1.00,0.00,0.00,0.00,0.00,0.00,normal. 0 ,tcp,http,SF,236,1228,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0.00,0.00,0.00,0.00,1.00,0.00,0.00,2,2,1.00,0.00,0.50,0.00,0.00,0.00,0.00,0.00,normal. 0 ,tcp,http,SF,233,2032,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,2,0.00,0.00,0.00,0.00,1.00,0.00,0.00,3,3,1.00,0.00,0.33,0.00,0.00,0.00,0.00,0.00,normal. 0 ,tcp,http,SF,239,486,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,3,3,0.00,0.00,0.00,0.00,1.00,0.00,0.00,4,4,1.00,0.00,0.25,0.00,0.00,0.00,0.00,0.00,normal. 0 ,tcp,http,SF,238,1282,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,4,4,0.00,0.00,0.00,0.00,1.00,0.00,0.00,5,5,1.00,0.00,0.20,0.00,0.00,0.00,0.00,0.00,normal. 0 ,tcp,http,SF,235,1337,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,5,5,0.00,0.00,0.00,0.00,1.00,0.00,0.00,6,6,1.00,0.00,0.17,0.00,0.00,0.00,0.00,0.00,normal. 0 ,tcp,http,SF,234,1364,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,6,6,0.00,0.00,0.00,0.00,1.00,0.00,0.00,7,7,1.00,0.00,0.14,0.00,0.00,0.00,0.00,0.00,normal. 0 ,tcp,http,SF,239,1295,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,7,7,0.00,0.00,0.00,0.00,1.00,0.00,0.00,8,8,1.00,0.00,0.12,0.00,0.00,0.00,0.00,0.00,normal. 0 ,tcp,http,SF,181,5450,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,8,8,0.00,0.00,0.00,0.00,1.00,0.00,0.00,9,9,1.00,0.00,0.11,0.00,0.00,0.00,0.00,0.00,normal. 0 ,tcp,http,SF,184,124,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0.00,0.00,0.00,0.00,1.00,0.00,0.00,10,10,1.00,0.00,0.10,0.00,0.00,0.00,0.00,0.00,normal. 0 ,tcp,http,SF,185,9020,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,2,0.00,0.00,0.00,0.00,1.00,0.00,0.00,11,11,1.00,0.00,0.09,0.00,0.00,0.00,0.00,0.00,normal. 0 ,tcp,http,SF,239,1295,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0.00,0.00,0.00,0.00,1.00,0.00,0.00,12,12,1.00,0.00,0.08,0.00,0.00,0.00,0.00,0.00,normal. 0 ,tcp,http,SF,181,5450,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,2,0.00,0.00,0.00,0.00,1.00,0.00,0.00,13,13,1.00,0.00,0.08,0.00,0.00,0.00,0.00,0.00,normal. 0 ,tcp,http,SF,236,1228,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,3,3,0.00,0.00,0.00,0.00,1.00,0.00,0.00,14,14,1.00,0.00,0.07,0.00,0.00,0.00,0.00,0.00,normal. 0 ,tcp,http,SF,233,2032,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,4,4,0.00,0.00,0.00,0.00,1.00,0.00,0.00,15,15,1.00,0.00,0.07,0.00,0.00,0.00,0.00,0.00,normal.","title":"\u6837\u672c\u9009\u62e9"},{"location":"0x1_%E5%9F%BA%E4%BA%8Ekmeans%E7%9A%84%E7%BD%91%E7%BB%9C%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/#_4","text":"\u7531\u4e8e\u672c\u6b21\u5b9e\u8df5\u91c7\u7528\u7684\u6570\u636e\u96c6\u5df2\u7ecf\u542b\u6709\u6807\u7b7e\u5185\u5bb9\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5148\u5254\u9664\u6807\u7b7e\u3002","title":"\u6807\u7b7e\u5254\u9664"},{"location":"0x1_%E5%9F%BA%E4%BA%8Ekmeans%E7%9A%84%E7%BD%91%E7%BB%9C%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/#_5","text":"// ToDO","title":"\u7279\u5f81\u5de5\u7a0b"},{"location":"0x1_%E5%9F%BA%E4%BA%8Ekmeans%E7%9A%84%E7%BD%91%E7%BB%9C%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/#_6","text":"// ToDO","title":"\u6a21\u578b\u9009\u62e9"},{"location":"0x1_%E5%9F%BA%E4%BA%8Ekmeans%E7%9A%84%E7%BD%91%E7%BB%9C%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/#_7","text":"// ToDO","title":"\u6548\u679c\u8bc4\u4f30"},{"location":"0x2_%E5%9F%BA%E4%BA%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84DGA%E6%A3%80%E6%B5%8B/","text":"\u57fa\u4e8e\u6df1\u5ea6\u5b66\u4e60\u7684DGA\u68c0\u6d4b \u63d0\u51fa\u95ee\u9898 \u4e1a\u52a1\u573a\u666f\uff1a C2\u901a\u8baf\u5e38\u91c7\u7528\u57df\u540d\u751f\u6210\u7b97\u6cd5\uff08Domain Generation Algorithm, DGA\uff09\u6280\u672f \u57fa\u4e8e\u56fa\u5b9aIOC\u7684\u68c0\u6d4b\u65e0\u6cd5\u5e94\u5bf9\u52a8\u6001\u751f\u6210\u7684\u6076\u610f\u57df\u540d // ToDO","title":"\u57fa\u4e8e\u6df1\u5ea6\u5b66\u4e60\u7684DGA\u68c0\u6d4b"},{"location":"0x2_%E5%9F%BA%E4%BA%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84DGA%E6%A3%80%E6%B5%8B/#dga","text":"","title":"\u57fa\u4e8e\u6df1\u5ea6\u5b66\u4e60\u7684DGA\u68c0\u6d4b"},{"location":"0x2_%E5%9F%BA%E4%BA%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84DGA%E6%A3%80%E6%B5%8B/#_1","text":"\u4e1a\u52a1\u573a\u666f\uff1a C2\u901a\u8baf\u5e38\u91c7\u7528\u57df\u540d\u751f\u6210\u7b97\u6cd5\uff08Domain Generation Algorithm, DGA\uff09\u6280\u672f \u57fa\u4e8e\u56fa\u5b9aIOC\u7684\u68c0\u6d4b\u65e0\u6cd5\u5e94\u5bf9\u52a8\u6001\u751f\u6210\u7684\u6076\u610f\u57df\u540d // ToDO","title":"\u63d0\u51fa\u95ee\u9898"},{"location":"0x3_%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%81%B6%E6%84%8FURL%E6%A3%80%E6%B5%8B/","text":"\u57fa\u4e8e\u673a\u5668\u5b66\u4e60\u7684\u6076\u610fURL\u68c0\u6d4b \u76ee\u5f55 \u57fa\u4e8e\u673a\u5668\u5b66\u4e60\u7684\u6076\u610fURL\u68c0\u6d4b \u76ee\u5f55 \u6982\u8ff0 \u63d0\u51fa\u95ee\u9898 \u6570\u636e\u5904\u7406 \u6837\u672c\u9009\u62e9 \u6570\u636e\u6e05\u6d17 \u7279\u5f81\u63d0\u53d6 \u6ce8\uff1aTF-IDF \u6a21\u578b\u9009\u62e9 \u6548\u679c\u8bc4\u4f30 \u5b8c\u6574\u4ee3\u7801 \u6982\u5ff5\u8865\u5145 \u903b\u8f91\u56de\u5f52 \u652f\u6301\u5411\u91cf\u673a\uff08SVM\uff09 Reference \u6982\u8ff0 \u672c\u6b21\u5b9e\u8df5\u867d\u9898\u4e3a\u201d\u57fa\u4e8e\u673a\u5668\u5b66\u4e60\u201c\uff0c\u4f46\u76ee\u524d\u4e5f\u53ea\u66f4\u65b0\u5230\u4f7f\u7528TF-IDF\u548c\u7ebf\u6027\u56de\u5f52\u6a21\u578b\u7684\u8fdb\u5ea6\u3002\u4e0d\u8fc7\u5343\u91cc\u4e4b\u884c\u59cb\u4e8e\u8db3\u4e0b\u561b\uff0c\u540e\u9762\u518d\u66f4\u5566\ud83d\udc26 \u63d0\u51fa\u95ee\u9898 \u9996\u5148\u6211\u4eec\u9700\u8981\u5c06\u5b89\u5168\u95ee\u9898\u8fdb\u884c\u62bd\u8c61\uff0c\u4e5f\u5c31\u662f\u9488\u5bf9\u73b0\u72b6\u63d0\u51fa\u95ee\u9898\u3002\u5728\u5047\u5b9a\u7684\u8fd9\u4e2a\u4e1a\u52a1\u80cc\u666f\u4e0b\uff0c\u6211\u4eec\u53d1\u73b0\uff1a \u6076\u610fURL\u5b58\u5728\u7279\u5b9a\u51e0\u79cd\u7c7b\u578b1 \u7279\u5b9a\u7c7b\u578b\u6076\u610fURL\u5728\u6587\u672c\u4e0a\u5b58\u5728\u666e\u904d\u7684 \u8bcd\u6c47\u7279\u5f81 \uff0c\u4f8b\u5982\u9493\u9c7cURL\u4e2d\u5e38\u89c1\"login\", \"account\", \"sigin\"\u7b49\u5173\u952e\u8bcd \u56e0\u6b64\u6211\u4eec\u5c1d\u8bd5\u4f7f\u7528\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u5bf9\u6076\u610fURL\u8fdb\u884c\u68c0\u6d4b\u5206\u6790\u3002 \u6570\u636e\u5904\u7406 \u6837\u672c\u9009\u62e9 malicious-URLs malicious-URLs \u5728Github\u4e0a\u9762\u4e00\u4e2a \u4f7f\u7528\u673a\u5668\u5b66\u4e60\u53bb\u68c0\u6d4b\u6076\u610fURL\u7684\u9879\u76ee \uff0c\u91cc\u9762\u6709\u4e00\u4e2a\u8bad\u7ec3\u96c6\uff0c\u6709\u505a\u6807\u8bb0\u662f\u6b63\u5e38\u7684URL\u8fd8\u662f\u6076\u610f\u7684URL \u5185\u5bb9\u7c7b\u578b\uff1a\u6587\u672c\u6837\u672c \u662f\u5426\u6807\u8bb0\uff1a\u662f \u662f\u5426\u7279\u5f81\u5316\uff1a\u5426 \u4f7f\u7528\u8303\u56f4\uff1a\u5165\u4fb5\u68c0\u6d4b\u3001\u5f02\u5e38\u6d41\u91cf\u3001WAF \u6570\u636e\u6e05\u6d17 \u7531\u4e8e\u6837\u672c\u672c\u8eab\u4e3a\u5904\u7406\u597d\u7684\u6807\u8bb0\u6570\u636e\uff0c\u6240\u4ee5\u5728\u6570\u636e\u683c\u5f0f\u548c\u810f\u6570\u636e\u4e0a\u65e0\u9700\u5904\u7406\uff08\u771f\u5b9e\u60c5\u51b5\u4e0b\u53ef\u80fd\u6b63\u597d\u76f8\u53cd:-(\uff09\u3002 \u7f16\u5199\u6570\u636e\u5e27\u63d0\u53d6\u51fd\u6570\uff1a def csv_data_read ( csv_file_path ): # \u4e3a\u51cf\u5c11\u8bad\u7ec3\u65f6\u95f4\uff0c\u53ef\u53ea\u53d6\u5934\u90e810W\u6761\uff0c\u4f46\u4e00\u5b9a\u9700\u8981\u5148\u6253\u4e71\u6837\u672c\uff09 # df_csv = pd.read_csv(csv_file_path).head(100000) df_csv = pd . read_csv ( csv_file_path ) urls = [] labels = [] for index , row in df_csv . iterrows (): urls . append ( row [ \"url\" ]) labels . append ( row [ \"label\" ]) return urls , labels \u7f16\u5199\u5bf9URL\u7684\u6570\u636e\u6e05\u6d17\u51fd\u6570\uff1a def url_tokenize ( url ): \"\"\" \u5bf9URL\u8fdb\u884c\u6e05\u6d17\uff0c\u5220\u9664\u659c\u7ebf\u3001\u70b9\u3001\u548ccom\uff0c\u8fdb\u884c\u5206\u8bcd :param url: :return: \"\"\" web_url = url . lower () dot_slash = [] slash = str ( web_url ) . split ( '/' ) for i in slash : r1 = str ( i ) . split ( '-' ) token_slash = [] for j in range ( 0 , len ( r1 )): r2 = str ( r1 [ j ]) . split ( '.' ) token_slash = token_slash + r2 dot_slash = dot_slash + r1 + token_slash urltoken_list = list ( set ( dot_slash )) white_words = [ \"com\" , \"http:\" , \"https:\" , \"\" ] for white_word in white_words : if white_word in urltoken_list : urltoken_list . remove ( white_word ) return urltoken_list \u7279\u5f81\u63d0\u53d6 \u6211\u4eec\u9996\u5148\u52a0\u8f7d\u6570\u636e\u96c6\uff1a grep_csv_file_path = \"../../data/data-0x3/grey-url.csv\" black_csv_file_path = \"../../data/data-0x3/black-url.csv\" grey_urls , y = csv_data_read ( grep_csv_file_path ) \u6211\u4eec\u4f7f\u7528TF-IDF\u7b97\u6cd5\u63d0\u53d6URL\u7684\u7279\u5f81\uff0c\u5e76\u5c06\u6570\u636e\u5e27\u5212\u5206\u4e3a\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\uff1a url_vectorizer = TfidfVectorizer ( tokenizer = url_tokenize ) x = url_vectorizer . fit_transform ( grey_urls ) x_train , x_test , y_train , y_test = train_test_split ( x , y , test_size = 0.2 , random_state = 42 ) \u6ce8\uff1aTF-IDF TF-IDF(Term Frequency \u2013 Inverse Document Frequency)\uff0c\u5373\u8bcd\u9891-\u9006\u6587\u6863\u9891\u7387\u3002\u5728\u8ba1\u7b97\u4e0a\u4e3a\u8bcd\u9891\u548c\u9006\u6587\u6863\u9891\u7387\u7684\u4e58\u79ef\u3002\u8ba1\u7b97\u65b9\u6cd5\u5982\u4e0b\uff1a \u8ba1\u7b97\u8bcd\u9891\uff08TF\uff09 \u67d0\u4e2a\u8bcd\u5728\u6587\u7ae0\u4e2d\u51fa\u73b0\u7684\u6b21\u6570/\u6587\u7ae0\u7684\u603b\u8bcd\u6570 \u5373\u67d0\u4e2a\u8bcd\u5728\u8fd9\u6bb5\u6587\u5b57\u4e2d\u51fa\u73b0\u5f97\u8d8a\u591a\uff0cTF\u5c31\u8d8a\u5927 \u8ba1\u7b97\u9006\u6587\u6863\u9891\u7387\uff08IDF\uff09 log(\u8bed\u6599\u5e93\u7684\u6587\u6863\u603b\u6570/\u5305\u542b\u8be5\u8bcd\u7684\u6587\u6863\u6570+1) \u67d0\u4e2a\u8bcd\u5728\u666e\u904d\u60c5\u51b5\u4e0b\u8d8a\u5e38\u89c1\uff0c\u5206\u6bcd\u5927\uff0cIDF\u4e5f\u7ea6\u8d8b\u4e8e0 \u8ba1\u7b97TF-IDF TF-IDF = TF * IDF TF-IDF\u8d8a\u5927\uff0c\u8bf4\u660e\u8bcd\u5728\u8fd9\u6bb5\u6587\u7ae0\u4e2d\u8d8a\u91cd\u8981\uff0c\u4f46\u56e0\u4e3a\u6709IDF\u7684\u5b58\u5728\uff0c\u53c8\u80fd\u907f\u514d\u628a\u201c\u662f\u201d\u3001\u201d\u7684\u201c\u3001\u201c\u548c\u201d\u7b49\u505c\u7528\u8bcd\u7684TF-IDF\u503c\u964d\u4f4e \u5728\u5e94\u7528\u4e0a\uff1a\u5c06\u6587\u7ae0\u5206\u8bcd\uff0c\u8ba1\u7b97TF-IDF\uff0c\u6309\u7167\u5176\u503c\u5927\u5c0f\u964d\u5e8f\u6392\u5217\uff0c\u6392\u540d\u9760\u524d\u7684\u5373\u6587\u7ae0\u7684\u5173\u952e\u8bcd \u6a21\u578b\u9009\u62e9 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5bf9\u6570\u636e\u96c6\u4f7f\u7528 \u903b\u8f91\u56de\u5f52\u6a21\u578b \uff0c\u5e76\u5c06\u5c06\u62df\u5408\u540e\u7684\u6a21\u578b\u548c\u5411\u91cf\u4fdd\u5b58\u4e3a\u672c\u5730\u6587\u4ef6\uff0c\u4fbf\u4e8e\u91cd\u590d\u4f7f\u7528 # \u5bf9\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u6267\u884c\u903b\u8f91\u56de\u5f52 l_regress = LogisticRegression ( solver = 'liblinear' ) l_regress . fit ( x_train , y_train ) l_score = l_regress . score ( x_test , y_test ) # print(\"\u6d4b\u8bd5\u62df\u5408\u5206\u6570\u4e3a\uff1a{0}\".format(l_score)) file_mode = \"../../model/model-0x3/model.pkl\" dump_model_object ( file_mode ) file_vector = \"../../model/model-0x3/vector.pl\" dump_model_object ( file_vector ) \u6b64\u5916\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528\u652f\u6301\u5411\u91cf\u673a\u6a21\u578b\uff1a def practice_svm ( x_train , x_test , y_train , y_test ): \"\"\" \u5b9e\u8df5SVM\u7b97\u6cd5\u8bc6\u522b\u6076\u610fURL :param x_train: :param x_test: :param y_train: :param y_test: :return: \"\"\" model_svm = SVC () # \u6ce8\u610f\uff1aSVM\u8bad\u7ec3\u53ef\u80fd\u8f83\u6162\uff0c\u6ce8\u610f\u6837\u672c\u7684\u6570\u91cf model_svm . fit ( x_train , y_train ) svm_score = model_svm . score ( x_test , y_test ) print ( \"\u6d4b\u8bd5\u62df\u5408\u5206\u6570\u4e3a\uff1a {0} \" . format ( svm_score )) model_svm_save = model_svm \"\"\" \u4fdd\u5b58\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u548c\u5411\u91cf \"\"\" file_mode = \"../../model/model-0x3/model_svm.pkl\" dump_model_object ( file_mode , model_svm_save ) \u6548\u679c\u8bc4\u4f30 \u5728\u201c\u7279\u5f81\u63d0\u53d6\u201d\u90e8\u5206\u6211\u4eec\u91c7\u7528 train_test_split \u65b9\u6cd5\u8fdb\u884c\u968f\u673a\u5212\u5206\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\uff0c\u8fdb\u884c \u4ea4\u53c9\u9a8c\u8bc1 \uff0c\u518d\u6b21\u56de\u987e\u4ee3\u7801\u4e3a\uff1a x_train , x_test , y_train , y_test = train_test_split ( x , y , test_size = 0.2 , random_state = 42 ) \u4f7f\u7528\u7ebf\u6027\u56de\u5f52\u6a21\u578b\uff0c\u6700\u540e\u5f97\u5230\u6d4b\u8bd5\u62df\u5408\u5206\u6570\u4e3a\uff1a 0.9599966703530615 \u6ce8\uff0c\u53c2\u6570\u4ecb\u7ecd\uff1a test_size \uff1a\u6d4b\u8bd5\u96c6\u5728\u603b\u6837\u672c\u4e2d\u7684\u5360\u6bd4 random_state \uff1a\u968f\u673a\u6570\u7684\u79cd\u5b50\uff0c\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u8be5\u7ec4\u968f\u673a\u6570\u7684\u7f16\u53f7\u3002\u89c4\u5219\u662f\uff1a\u79cd\u5b50\u4e0d\u540c\u65f6\uff0c\u4ea7\u751f\u4e0d\u540c\u7684\u968f\u673a\u6570\uff1b\u79cd\u5b50\u76f8\u540c\u65f6\uff0c\u5728\u4e0d\u540c\u5b9e\u4f8b\u4e0b\u4e5f\u4ea7\u751f\u76f8\u540c\u7684\u968f\u673a\u6570\u3002\u6bd4\u5982\u5728\u4e0a\u9762\u7684\u8bed\u53e5\u4e2d\uff0c test_size \u4e3a0.2\uff0c\u5373\u9009\u62e9\u603b\u6837\u672c\u768420%\u4f5c\u4e3a\u6d4b\u8bd5\u96c6\uff0c\u4f46\u662f\u5982\u4f55\u9009\u62e9\u5462\uff1f random_state \u5c31\u6307\u5b9a\u4e86\uff1a\u6309\u7167\u201c\u7b2c42\u79cd\u201d\u89c4\u5219\u9009\u62e9\u8fd920%\u968f\u673a\u7684\u6570\u636e\u3002 \u4f7f\u7528\u652f\u6301\u5411\u91cf\u673a\u6a21\u578b\u65f6\uff0c\u53d1\u73b0\u5728\u6570\u636e\u91cf\u8f83\u5927\u7684\u60c5\u51b5\u4e0b\uff0c\u8be5\u6a21\u578b\u7684\u8fd0\u7b97\u901f\u5ea6\u8f83\u6162\uff0c\u56e0\u6b64\u5728\u5b9e\u9a8c\u73af\u5883\u4e0b\u4e0d\u5f97\u5df2\u51cf\u5c11\u4e86\u8bad\u7ec3\u6837\u672c\u7684\u6570\u91cf\uff0c\u4f46\u4e5f\u5bfc\u81f4\u4e86\u62df\u5408\u5206\u6570\u7684\u964d\u4f4e\uff0c\u6240\u4ee5\u5c31\u4e0d\u5c55\u793a\u5728\u6837\u672c\u7f29\u6c34\u60c5\u51b5\u4e0b\u7684\u6d4b\u8bd5\u62df\u5408\u5206\u6570\u4e86\u3002\u540c\u65f6\uff0c\u4e5f\u4e86\u89e3\u5230\u8fd9\u662f\u4f20\u7edf\u4e8c\u5206\u7c7bSVM\u5728\u9762\u5bf9\u5927\u6570\u636e\u91cf\u65f6\u7684\u5f0a\u7aef\uff0c\u5e76\u4e14\u968f\u7740\u96c6\u6210\u5b66\u4e60\u7684\u6210\u719f\uff0cSVM\u73b0\u5728\u201c\u666e\u904d\u7528\u4e8e\u96c6\u6210\u5b66\u4e60\u4e2d\u57fa\u6a21\u578b\u7684\u6784\u5efa\u201d[2]\uff0c\u800c\u4e0d\u662f\u4f5c\u4e3a\u552f\u4e00\u7684\u5206\u7c7b\u6a21\u578b\u4f7f\u7528\u3002 \u5b8c\u6574\u4ee3\u7801 \"\"\" Author: Toky Description: \u57fa\u4e8e\u673a\u5668\u5b66\u4e60\u7684\u6076\u610fURL\u68c0\u6d4b \"\"\" import copy import pickle import pandas as pd from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression def csv_data_read ( csv_file_path ): # \u4e3a\u51cf\u5c11\u8bad\u7ec3\u65f6\u95f4\uff0c\u53ef\u53ea\u53d6\u5934\u90e810W\u6761\uff0c\u4f46\u4e00\u5b9a\u9700\u8981\u5148\u6253\u4e71\u6837\u672c\uff09 # df_csv = pd.read_csv(csv_file_path).head(100000) df_csv = pd . read_csv ( csv_file_path ) urls = [] labels = [] for index , row in df_csv . iterrows (): urls . append ( row [ \"url\" ]) labels . append ( row [ \"label\" ]) return urls , labels def url_tokenize ( url ): \"\"\" \u5bf9URL\u8fdb\u884c\u6e05\u6d17\uff0c\u5220\u9664\u659c\u7ebf\u3001\u70b9\u3001\u548ccom\uff0c\u8fdb\u884c\u5206\u8bcd :param url: :return: \"\"\" web_url = url . lower () dot_slash = [] slash = str ( web_url ) . split ( '/' ) for i in slash : r1 = str ( i ) . split ( '-' ) token_slash = [] for j in range ( 0 , len ( r1 )): r2 = str ( r1 [ j ]) . split ( '.' ) token_slash = token_slash + r2 dot_slash = dot_slash + r1 + token_slash urltoken_list = list ( set ( dot_slash )) white_words = [ \"com\" , \"http:\" , \"https:\" , \"\" ] for white_word in white_words : if white_word in urltoken_list : urltoken_list . remove ( white_word ) return urltoken_list def dump_model_object ( file_path , model_object ): \"\"\" \u4f7f\u7528pickle\u5c06\u5185\u5b58\u4e2d\u7684\u5bf9\u8c61\u8f6c\u6362\u4e3a\u6587\u672c\u6d41\u4fdd\u5b58\u4e3a\u672c\u5730\u6587\u4ef6 :param file_path: :return: \"\"\" with open ( file_path , \"wb\" ) as f : pickle . dump ( model_object , f ) f . close () if __name__ == '__main__' : \"\"\" \u52a0\u8f7d\u6570\u636e\u96c6 \"\"\" grep_csv_file_path = \"../../data/data-0x3/grey-url.csv\" black_csv_file_path = \"../../data/data-0x3/black-url.csv\" grey_urls , y = csv_data_read ( grep_csv_file_path ) \"\"\" \u4f7f\u7528TF-IDF\u7b97\u6cd5\u63d0\u53d6\u5173\u952e\u8bcd\u7279\u5f81\uff0c\u5e76\u5c06\u6570\u636e\u5e27\u5212\u5206\u4e3a\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6 \"\"\" url_vectorizer = TfidfVectorizer ( tokenizer = url_tokenize ) url_vectorizer_save = copy . deepcopy ( url_vectorizer ) x = url_vectorizer . fit_transform ( grey_urls ) x_train , x_test , y_train , y_test = train_test_split ( x , y , test_size = 0.2 , random_state = 42 ) \"\"\" \u5bf9\u6570\u636e\u5e27\u6267\u884c\u903b\u8f91\u56de\u5f52\uff0c\u5c06\u62df\u5408\u540e\u7684\u6a21\u578b\u548c\u5411\u91cf\u4fdd\u5b58 \"\"\" # \u5bf9\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u6267\u884c\u903b\u8f91\u56de\u5f52 l_regress = LogisticRegression ( solver = 'liblinear' ) l_regress . fit ( x_train , y_train ) l_score = l_regress . score ( x_test , y_test ) print ( \"\u6d4b\u8bd5\u62df\u5408\u5206\u6570\u4e3a\uff1a {0} \" . format ( l_score )) file_mode = \"../../model/model-0x3/model.pkl\" dump_model_object ( file_mode , l_regress ) file_vector = \"../../model/model-0x3/vector.pl\" dump_model_object ( file_vector , url_vectorizer_save ) \u6982\u5ff5\u8865\u5145 \u903b\u8f91\u56de\u5f52 \u903b\u8f91\u56de\u5f52\u6a21\u578b\u901a\u8fc7\u903b\u8f91\u51fd\u6570\u5bf9\u6570\u636e\u8fdb\u884c \u5206\u7c7b \uff0c\u901a\u5e38\u5305\u62ec\u7528\u4e8e\u4f30\u8ba1\u903b\u8f91\u6a21\u578b\u7ed3\u679c\u7684\u72ec\u7acb\u4e8c\u5143\u53d8\u91cf\u3002\u76f8\u6bd4\u4e8e\u7ebf\u6027\u56de\u5f52\uff0c\u903b\u8f91\u56de\u5f52\u5904\u7406\u7684\u5206\u7c7b\u95ee\u9898\uff0c\u8f93\u51fa\u7684\u7ed3\u679c\u4e3a\u79bb\u6563\u503c\uff1b\u800c\u7ebf\u6027\u56de\u5f52\u89e3\u51b3\u7684\u662f\u56de\u5f52\u95ee\u9898\u8f93\u51fa\u7684\u662f\u8fde\u7eed\u503c\u3002 \u8be6\u7ec6\u89e3\u8bfb\u53ef\u4ee5\u53c2\u8003\u6587\u7ae0[1]\uff0c\u6ce8\u610f\uff0c\u867d\u7136\u8be5\u7b97\u6cd5\u5728\u7528\u8d77\u6765\u65f6\u663e\u5f97\u975e\u5e38\u7b80\u5355\uff0c\u4f46\u662f\u5176\u539f\u7406\u4e2d\u7684\u7ec6\u8282\u90e8\u5206\u8fd8\u662f\u5f88\u591a\u7684\uff0c\u611f\u5174\u8da3\u53ef\u4ee5\u4ed4\u7ec6\u7814\u7a76\u4e00\u4e0b\u3002 \u652f\u6301\u5411\u91cf\u673a\uff08SVM\uff09 \u652f\u6301\u5411\u91cf\u673a\uff08Surport Vector Machine, SVM\uff09\u540c\u6837\u7528\u4e8e\u5206\u7c7b\uff0c\u662f\u4e00\u4e2a\u4e8c\u5143\u5206\u7c7b\u7b97\u6cd5\uff0c\u4f46\u4fee\u6539\u540e\u4e5f\u652f\u6301\u591a\u5206\u7c7b\u95ee\u9898\u3002\u652f\u6301\u5411\u91cf\u673a\u901a\u8fc7\u5728\u9ad8\u7ef4\u7a7a\u95f4\u4e2d\u521b\u5efa\u6700\u4f73\u8d85\u5e73\u9762\u6765\u5b9e\u73b0\uff0c\u8fd9\u4e2a\u8d85\u5e73\u9762\u521b\u5efa\u7684\u5212\u5206\u88ab\u79f0\u4e3a\u7c7b\u3002 \u5bf9\u4e8e\u5206\u7c7b\u95ee\u9898\u672c\u8d28\u7684\u7406\u89e3\uff0c\u5c31\u662f\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u5212\u5206\u7684\u8d85\u5e73\u9762\uff0c\u8ba9\u6570\u636e\u5c3d\u53ef\u80fd\u591a\u5730\u5206\u5e03\u5728\u8fd9\u4e2a\u5e73\u9762\u7684\u4e24\u4fa7\uff0c\u4ece\u800c\u5b9e\u73b0\u5206\u7c7b\u7684\u6548\u679c\u3002\u4f46\u5728\u5b9e\u9645\u6570\u636e\u4e0b\uff0c\u5f80\u5f80\u5b58\u5728\u591a\u4e2a\u8d85\u5e73\u9762\uff0c\u90a3\u4e48\u6b64\u65f6\u6211\u4eec\u600e\u4e48\u53d6\u820d\u5462\uff1f\u5c31\u662f\u6bd4\u8f83\u5bb9\u6613\u5206\u7c7b\u9519\u8bef\u7684\u6570\u636e\u70b9\uff0c\u800c\u8fd9\u4e9b\u70b9\u5c31\u662f\u79bb\u5e73\u9762\u5f88\u8fd1\u7684\u70b9\uff0c\u56e0\u4e3a\u79bb\u5e73\u9762\u5f88\u8fdc\u7684\u70b9\u662f\u76f8\u5dee\u5f88\u5927\u7684\uff0c\u57fa\u672c\u4e0d\u4f1a\u5b58\u5728\u5206\u7c7b\u9519\u8bef\u7684\u60c5\u51b5\u3002\u800cSVM\u7684\u6838\u5fc3\u601d\u60f3\u5c31\u662f\u5982\u6b64\uff0c\u627e\u5230\u79bb\u5e73\u9762\u5f88\u8fd1\u7684\u3001\u5bb9\u6613\u5206\u7c7b\u9519\u8bef\u7684\u70b9\uff0c\u7136\u540e\u60f3\u529e\u6cd5\u8ba9\u8fd9\u4e9b\u6570\u636e\u70b9\u79bb\u5e73\u9762\u8ddd\u79bb\u53d8\u8fdc\u3002\u90a3\u4e9b\u79bb\u8d85\u5e73\u9762\u5f88\u8fd1\u7684\u70b9\u4e5f\u5c31\u88ab\u79f0\u4e3a\u652f\u6301\u5411\u91cf\uff08Support Vector\uff09\u3002 \u8be6\u7ec6\u7684\u6570\u5b66\u539f\u7406\uff0c\u53ef\u4ee5\u53c2\u8003\u6587\u7ae0[2]\uff0c\u8be5\u7b97\u6cd5\u6709\u6bd4\u8f83\u5b8c\u5907\u7684\u6570\u5b66\u7406\u8bba\u652f\u6491\u7684\uff0c\u4f46\u8be6\u7ec6\u7684\u6570\u7406\u548c\u63a8\u5012\u4e5f\u76f8\u5bf9\u6bd4\u8f83\u590d\u6742\uff0c\u56e0\u6b64\u4e5f\u53ef\u4ee5\u770b\u81ea\u5df1\u9700\u8981\u8fdb\u884c\u5b66\u4e60\uff08~~\u5176\u5b9e\u5c31\u662f\u6211\u770b\u4e0d\u61c2\uff0c\u4e0d\u732e\u4e11\u6765\u63a8\u5bfc\u4e86~~\uff09\u3002 Reference [1]\u3010\u673a\u5668\u5b66\u4e60\u3011\u903b\u8f91\u56de\u5f52\uff08\u975e\u5e38\u8be6\u7ec6\uff09\uff0c \u963f\u6cfd \uff0chttps://zhuanlan.zhihu.com/p/74874291 [2] 05 SVM - \u652f\u6301\u5411\u91cf\u673a - \u6982\u5ff5\u3001\u7ebf\u6027\u53ef\u5206\uff0c \u767d\u5c14\u6469\u65af \uff0chttps://www.jianshu.com/p/410a56129757","title":"\u57fa\u4e8e\u673a\u5668\u5b66\u4e60\u7684\u6076\u610fURL\u68c0\u6d4b"},{"location":"0x3_%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%81%B6%E6%84%8FURL%E6%A3%80%E6%B5%8B/#url","text":"","title":"\u57fa\u4e8e\u673a\u5668\u5b66\u4e60\u7684\u6076\u610fURL\u68c0\u6d4b"},{"location":"0x3_%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%81%B6%E6%84%8FURL%E6%A3%80%E6%B5%8B/#_1","text":"\u57fa\u4e8e\u673a\u5668\u5b66\u4e60\u7684\u6076\u610fURL\u68c0\u6d4b \u76ee\u5f55 \u6982\u8ff0 \u63d0\u51fa\u95ee\u9898 \u6570\u636e\u5904\u7406 \u6837\u672c\u9009\u62e9 \u6570\u636e\u6e05\u6d17 \u7279\u5f81\u63d0\u53d6 \u6ce8\uff1aTF-IDF \u6a21\u578b\u9009\u62e9 \u6548\u679c\u8bc4\u4f30 \u5b8c\u6574\u4ee3\u7801 \u6982\u5ff5\u8865\u5145 \u903b\u8f91\u56de\u5f52 \u652f\u6301\u5411\u91cf\u673a\uff08SVM\uff09 Reference","title":"\u76ee\u5f55"},{"location":"0x3_%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%81%B6%E6%84%8FURL%E6%A3%80%E6%B5%8B/#_2","text":"\u672c\u6b21\u5b9e\u8df5\u867d\u9898\u4e3a\u201d\u57fa\u4e8e\u673a\u5668\u5b66\u4e60\u201c\uff0c\u4f46\u76ee\u524d\u4e5f\u53ea\u66f4\u65b0\u5230\u4f7f\u7528TF-IDF\u548c\u7ebf\u6027\u56de\u5f52\u6a21\u578b\u7684\u8fdb\u5ea6\u3002\u4e0d\u8fc7\u5343\u91cc\u4e4b\u884c\u59cb\u4e8e\u8db3\u4e0b\u561b\uff0c\u540e\u9762\u518d\u66f4\u5566\ud83d\udc26","title":"\u6982\u8ff0"},{"location":"0x3_%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%81%B6%E6%84%8FURL%E6%A3%80%E6%B5%8B/#_3","text":"\u9996\u5148\u6211\u4eec\u9700\u8981\u5c06\u5b89\u5168\u95ee\u9898\u8fdb\u884c\u62bd\u8c61\uff0c\u4e5f\u5c31\u662f\u9488\u5bf9\u73b0\u72b6\u63d0\u51fa\u95ee\u9898\u3002\u5728\u5047\u5b9a\u7684\u8fd9\u4e2a\u4e1a\u52a1\u80cc\u666f\u4e0b\uff0c\u6211\u4eec\u53d1\u73b0\uff1a \u6076\u610fURL\u5b58\u5728\u7279\u5b9a\u51e0\u79cd\u7c7b\u578b1 \u7279\u5b9a\u7c7b\u578b\u6076\u610fURL\u5728\u6587\u672c\u4e0a\u5b58\u5728\u666e\u904d\u7684 \u8bcd\u6c47\u7279\u5f81 \uff0c\u4f8b\u5982\u9493\u9c7cURL\u4e2d\u5e38\u89c1\"login\", \"account\", \"sigin\"\u7b49\u5173\u952e\u8bcd \u56e0\u6b64\u6211\u4eec\u5c1d\u8bd5\u4f7f\u7528\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u5bf9\u6076\u610fURL\u8fdb\u884c\u68c0\u6d4b\u5206\u6790\u3002","title":"\u63d0\u51fa\u95ee\u9898"},{"location":"0x3_%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%81%B6%E6%84%8FURL%E6%A3%80%E6%B5%8B/#_4","text":"","title":"\u6570\u636e\u5904\u7406"},{"location":"0x3_%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%81%B6%E6%84%8FURL%E6%A3%80%E6%B5%8B/#_5","text":"malicious-URLs malicious-URLs \u5728Github\u4e0a\u9762\u4e00\u4e2a \u4f7f\u7528\u673a\u5668\u5b66\u4e60\u53bb\u68c0\u6d4b\u6076\u610fURL\u7684\u9879\u76ee \uff0c\u91cc\u9762\u6709\u4e00\u4e2a\u8bad\u7ec3\u96c6\uff0c\u6709\u505a\u6807\u8bb0\u662f\u6b63\u5e38\u7684URL\u8fd8\u662f\u6076\u610f\u7684URL \u5185\u5bb9\u7c7b\u578b\uff1a\u6587\u672c\u6837\u672c \u662f\u5426\u6807\u8bb0\uff1a\u662f \u662f\u5426\u7279\u5f81\u5316\uff1a\u5426 \u4f7f\u7528\u8303\u56f4\uff1a\u5165\u4fb5\u68c0\u6d4b\u3001\u5f02\u5e38\u6d41\u91cf\u3001WAF","title":"\u6837\u672c\u9009\u62e9"},{"location":"0x3_%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%81%B6%E6%84%8FURL%E6%A3%80%E6%B5%8B/#_6","text":"\u7531\u4e8e\u6837\u672c\u672c\u8eab\u4e3a\u5904\u7406\u597d\u7684\u6807\u8bb0\u6570\u636e\uff0c\u6240\u4ee5\u5728\u6570\u636e\u683c\u5f0f\u548c\u810f\u6570\u636e\u4e0a\u65e0\u9700\u5904\u7406\uff08\u771f\u5b9e\u60c5\u51b5\u4e0b\u53ef\u80fd\u6b63\u597d\u76f8\u53cd:-(\uff09\u3002 \u7f16\u5199\u6570\u636e\u5e27\u63d0\u53d6\u51fd\u6570\uff1a def csv_data_read ( csv_file_path ): # \u4e3a\u51cf\u5c11\u8bad\u7ec3\u65f6\u95f4\uff0c\u53ef\u53ea\u53d6\u5934\u90e810W\u6761\uff0c\u4f46\u4e00\u5b9a\u9700\u8981\u5148\u6253\u4e71\u6837\u672c\uff09 # df_csv = pd.read_csv(csv_file_path).head(100000) df_csv = pd . read_csv ( csv_file_path ) urls = [] labels = [] for index , row in df_csv . iterrows (): urls . append ( row [ \"url\" ]) labels . append ( row [ \"label\" ]) return urls , labels \u7f16\u5199\u5bf9URL\u7684\u6570\u636e\u6e05\u6d17\u51fd\u6570\uff1a def url_tokenize ( url ): \"\"\" \u5bf9URL\u8fdb\u884c\u6e05\u6d17\uff0c\u5220\u9664\u659c\u7ebf\u3001\u70b9\u3001\u548ccom\uff0c\u8fdb\u884c\u5206\u8bcd :param url: :return: \"\"\" web_url = url . lower () dot_slash = [] slash = str ( web_url ) . split ( '/' ) for i in slash : r1 = str ( i ) . split ( '-' ) token_slash = [] for j in range ( 0 , len ( r1 )): r2 = str ( r1 [ j ]) . split ( '.' ) token_slash = token_slash + r2 dot_slash = dot_slash + r1 + token_slash urltoken_list = list ( set ( dot_slash )) white_words = [ \"com\" , \"http:\" , \"https:\" , \"\" ] for white_word in white_words : if white_word in urltoken_list : urltoken_list . remove ( white_word ) return urltoken_list","title":"\u6570\u636e\u6e05\u6d17"},{"location":"0x3_%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%81%B6%E6%84%8FURL%E6%A3%80%E6%B5%8B/#_7","text":"\u6211\u4eec\u9996\u5148\u52a0\u8f7d\u6570\u636e\u96c6\uff1a grep_csv_file_path = \"../../data/data-0x3/grey-url.csv\" black_csv_file_path = \"../../data/data-0x3/black-url.csv\" grey_urls , y = csv_data_read ( grep_csv_file_path ) \u6211\u4eec\u4f7f\u7528TF-IDF\u7b97\u6cd5\u63d0\u53d6URL\u7684\u7279\u5f81\uff0c\u5e76\u5c06\u6570\u636e\u5e27\u5212\u5206\u4e3a\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\uff1a url_vectorizer = TfidfVectorizer ( tokenizer = url_tokenize ) x = url_vectorizer . fit_transform ( grey_urls ) x_train , x_test , y_train , y_test = train_test_split ( x , y , test_size = 0.2 , random_state = 42 )","title":"\u7279\u5f81\u63d0\u53d6"},{"location":"0x3_%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%81%B6%E6%84%8FURL%E6%A3%80%E6%B5%8B/#tf-idf","text":"TF-IDF(Term Frequency \u2013 Inverse Document Frequency)\uff0c\u5373\u8bcd\u9891-\u9006\u6587\u6863\u9891\u7387\u3002\u5728\u8ba1\u7b97\u4e0a\u4e3a\u8bcd\u9891\u548c\u9006\u6587\u6863\u9891\u7387\u7684\u4e58\u79ef\u3002\u8ba1\u7b97\u65b9\u6cd5\u5982\u4e0b\uff1a \u8ba1\u7b97\u8bcd\u9891\uff08TF\uff09 \u67d0\u4e2a\u8bcd\u5728\u6587\u7ae0\u4e2d\u51fa\u73b0\u7684\u6b21\u6570/\u6587\u7ae0\u7684\u603b\u8bcd\u6570 \u5373\u67d0\u4e2a\u8bcd\u5728\u8fd9\u6bb5\u6587\u5b57\u4e2d\u51fa\u73b0\u5f97\u8d8a\u591a\uff0cTF\u5c31\u8d8a\u5927 \u8ba1\u7b97\u9006\u6587\u6863\u9891\u7387\uff08IDF\uff09 log(\u8bed\u6599\u5e93\u7684\u6587\u6863\u603b\u6570/\u5305\u542b\u8be5\u8bcd\u7684\u6587\u6863\u6570+1) \u67d0\u4e2a\u8bcd\u5728\u666e\u904d\u60c5\u51b5\u4e0b\u8d8a\u5e38\u89c1\uff0c\u5206\u6bcd\u5927\uff0cIDF\u4e5f\u7ea6\u8d8b\u4e8e0 \u8ba1\u7b97TF-IDF TF-IDF = TF * IDF TF-IDF\u8d8a\u5927\uff0c\u8bf4\u660e\u8bcd\u5728\u8fd9\u6bb5\u6587\u7ae0\u4e2d\u8d8a\u91cd\u8981\uff0c\u4f46\u56e0\u4e3a\u6709IDF\u7684\u5b58\u5728\uff0c\u53c8\u80fd\u907f\u514d\u628a\u201c\u662f\u201d\u3001\u201d\u7684\u201c\u3001\u201c\u548c\u201d\u7b49\u505c\u7528\u8bcd\u7684TF-IDF\u503c\u964d\u4f4e \u5728\u5e94\u7528\u4e0a\uff1a\u5c06\u6587\u7ae0\u5206\u8bcd\uff0c\u8ba1\u7b97TF-IDF\uff0c\u6309\u7167\u5176\u503c\u5927\u5c0f\u964d\u5e8f\u6392\u5217\uff0c\u6392\u540d\u9760\u524d\u7684\u5373\u6587\u7ae0\u7684\u5173\u952e\u8bcd","title":"\u6ce8\uff1aTF-IDF"},{"location":"0x3_%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%81%B6%E6%84%8FURL%E6%A3%80%E6%B5%8B/#_8","text":"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5bf9\u6570\u636e\u96c6\u4f7f\u7528 \u903b\u8f91\u56de\u5f52\u6a21\u578b \uff0c\u5e76\u5c06\u5c06\u62df\u5408\u540e\u7684\u6a21\u578b\u548c\u5411\u91cf\u4fdd\u5b58\u4e3a\u672c\u5730\u6587\u4ef6\uff0c\u4fbf\u4e8e\u91cd\u590d\u4f7f\u7528 # \u5bf9\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u6267\u884c\u903b\u8f91\u56de\u5f52 l_regress = LogisticRegression ( solver = 'liblinear' ) l_regress . fit ( x_train , y_train ) l_score = l_regress . score ( x_test , y_test ) # print(\"\u6d4b\u8bd5\u62df\u5408\u5206\u6570\u4e3a\uff1a{0}\".format(l_score)) file_mode = \"../../model/model-0x3/model.pkl\" dump_model_object ( file_mode ) file_vector = \"../../model/model-0x3/vector.pl\" dump_model_object ( file_vector ) \u6b64\u5916\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528\u652f\u6301\u5411\u91cf\u673a\u6a21\u578b\uff1a def practice_svm ( x_train , x_test , y_train , y_test ): \"\"\" \u5b9e\u8df5SVM\u7b97\u6cd5\u8bc6\u522b\u6076\u610fURL :param x_train: :param x_test: :param y_train: :param y_test: :return: \"\"\" model_svm = SVC () # \u6ce8\u610f\uff1aSVM\u8bad\u7ec3\u53ef\u80fd\u8f83\u6162\uff0c\u6ce8\u610f\u6837\u672c\u7684\u6570\u91cf model_svm . fit ( x_train , y_train ) svm_score = model_svm . score ( x_test , y_test ) print ( \"\u6d4b\u8bd5\u62df\u5408\u5206\u6570\u4e3a\uff1a {0} \" . format ( svm_score )) model_svm_save = model_svm \"\"\" \u4fdd\u5b58\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u548c\u5411\u91cf \"\"\" file_mode = \"../../model/model-0x3/model_svm.pkl\" dump_model_object ( file_mode , model_svm_save )","title":"\u6a21\u578b\u9009\u62e9"},{"location":"0x3_%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%81%B6%E6%84%8FURL%E6%A3%80%E6%B5%8B/#_9","text":"\u5728\u201c\u7279\u5f81\u63d0\u53d6\u201d\u90e8\u5206\u6211\u4eec\u91c7\u7528 train_test_split \u65b9\u6cd5\u8fdb\u884c\u968f\u673a\u5212\u5206\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\uff0c\u8fdb\u884c \u4ea4\u53c9\u9a8c\u8bc1 \uff0c\u518d\u6b21\u56de\u987e\u4ee3\u7801\u4e3a\uff1a x_train , x_test , y_train , y_test = train_test_split ( x , y , test_size = 0.2 , random_state = 42 ) \u4f7f\u7528\u7ebf\u6027\u56de\u5f52\u6a21\u578b\uff0c\u6700\u540e\u5f97\u5230\u6d4b\u8bd5\u62df\u5408\u5206\u6570\u4e3a\uff1a 0.9599966703530615 \u6ce8\uff0c\u53c2\u6570\u4ecb\u7ecd\uff1a test_size \uff1a\u6d4b\u8bd5\u96c6\u5728\u603b\u6837\u672c\u4e2d\u7684\u5360\u6bd4 random_state \uff1a\u968f\u673a\u6570\u7684\u79cd\u5b50\uff0c\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u8be5\u7ec4\u968f\u673a\u6570\u7684\u7f16\u53f7\u3002\u89c4\u5219\u662f\uff1a\u79cd\u5b50\u4e0d\u540c\u65f6\uff0c\u4ea7\u751f\u4e0d\u540c\u7684\u968f\u673a\u6570\uff1b\u79cd\u5b50\u76f8\u540c\u65f6\uff0c\u5728\u4e0d\u540c\u5b9e\u4f8b\u4e0b\u4e5f\u4ea7\u751f\u76f8\u540c\u7684\u968f\u673a\u6570\u3002\u6bd4\u5982\u5728\u4e0a\u9762\u7684\u8bed\u53e5\u4e2d\uff0c test_size \u4e3a0.2\uff0c\u5373\u9009\u62e9\u603b\u6837\u672c\u768420%\u4f5c\u4e3a\u6d4b\u8bd5\u96c6\uff0c\u4f46\u662f\u5982\u4f55\u9009\u62e9\u5462\uff1f random_state \u5c31\u6307\u5b9a\u4e86\uff1a\u6309\u7167\u201c\u7b2c42\u79cd\u201d\u89c4\u5219\u9009\u62e9\u8fd920%\u968f\u673a\u7684\u6570\u636e\u3002 \u4f7f\u7528\u652f\u6301\u5411\u91cf\u673a\u6a21\u578b\u65f6\uff0c\u53d1\u73b0\u5728\u6570\u636e\u91cf\u8f83\u5927\u7684\u60c5\u51b5\u4e0b\uff0c\u8be5\u6a21\u578b\u7684\u8fd0\u7b97\u901f\u5ea6\u8f83\u6162\uff0c\u56e0\u6b64\u5728\u5b9e\u9a8c\u73af\u5883\u4e0b\u4e0d\u5f97\u5df2\u51cf\u5c11\u4e86\u8bad\u7ec3\u6837\u672c\u7684\u6570\u91cf\uff0c\u4f46\u4e5f\u5bfc\u81f4\u4e86\u62df\u5408\u5206\u6570\u7684\u964d\u4f4e\uff0c\u6240\u4ee5\u5c31\u4e0d\u5c55\u793a\u5728\u6837\u672c\u7f29\u6c34\u60c5\u51b5\u4e0b\u7684\u6d4b\u8bd5\u62df\u5408\u5206\u6570\u4e86\u3002\u540c\u65f6\uff0c\u4e5f\u4e86\u89e3\u5230\u8fd9\u662f\u4f20\u7edf\u4e8c\u5206\u7c7bSVM\u5728\u9762\u5bf9\u5927\u6570\u636e\u91cf\u65f6\u7684\u5f0a\u7aef\uff0c\u5e76\u4e14\u968f\u7740\u96c6\u6210\u5b66\u4e60\u7684\u6210\u719f\uff0cSVM\u73b0\u5728\u201c\u666e\u904d\u7528\u4e8e\u96c6\u6210\u5b66\u4e60\u4e2d\u57fa\u6a21\u578b\u7684\u6784\u5efa\u201d[2]\uff0c\u800c\u4e0d\u662f\u4f5c\u4e3a\u552f\u4e00\u7684\u5206\u7c7b\u6a21\u578b\u4f7f\u7528\u3002","title":"\u6548\u679c\u8bc4\u4f30"},{"location":"0x3_%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%81%B6%E6%84%8FURL%E6%A3%80%E6%B5%8B/#_10","text":"\"\"\" Author: Toky Description: \u57fa\u4e8e\u673a\u5668\u5b66\u4e60\u7684\u6076\u610fURL\u68c0\u6d4b \"\"\" import copy import pickle import pandas as pd from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression def csv_data_read ( csv_file_path ): # \u4e3a\u51cf\u5c11\u8bad\u7ec3\u65f6\u95f4\uff0c\u53ef\u53ea\u53d6\u5934\u90e810W\u6761\uff0c\u4f46\u4e00\u5b9a\u9700\u8981\u5148\u6253\u4e71\u6837\u672c\uff09 # df_csv = pd.read_csv(csv_file_path).head(100000) df_csv = pd . read_csv ( csv_file_path ) urls = [] labels = [] for index , row in df_csv . iterrows (): urls . append ( row [ \"url\" ]) labels . append ( row [ \"label\" ]) return urls , labels def url_tokenize ( url ): \"\"\" \u5bf9URL\u8fdb\u884c\u6e05\u6d17\uff0c\u5220\u9664\u659c\u7ebf\u3001\u70b9\u3001\u548ccom\uff0c\u8fdb\u884c\u5206\u8bcd :param url: :return: \"\"\" web_url = url . lower () dot_slash = [] slash = str ( web_url ) . split ( '/' ) for i in slash : r1 = str ( i ) . split ( '-' ) token_slash = [] for j in range ( 0 , len ( r1 )): r2 = str ( r1 [ j ]) . split ( '.' ) token_slash = token_slash + r2 dot_slash = dot_slash + r1 + token_slash urltoken_list = list ( set ( dot_slash )) white_words = [ \"com\" , \"http:\" , \"https:\" , \"\" ] for white_word in white_words : if white_word in urltoken_list : urltoken_list . remove ( white_word ) return urltoken_list def dump_model_object ( file_path , model_object ): \"\"\" \u4f7f\u7528pickle\u5c06\u5185\u5b58\u4e2d\u7684\u5bf9\u8c61\u8f6c\u6362\u4e3a\u6587\u672c\u6d41\u4fdd\u5b58\u4e3a\u672c\u5730\u6587\u4ef6 :param file_path: :return: \"\"\" with open ( file_path , \"wb\" ) as f : pickle . dump ( model_object , f ) f . close () if __name__ == '__main__' : \"\"\" \u52a0\u8f7d\u6570\u636e\u96c6 \"\"\" grep_csv_file_path = \"../../data/data-0x3/grey-url.csv\" black_csv_file_path = \"../../data/data-0x3/black-url.csv\" grey_urls , y = csv_data_read ( grep_csv_file_path ) \"\"\" \u4f7f\u7528TF-IDF\u7b97\u6cd5\u63d0\u53d6\u5173\u952e\u8bcd\u7279\u5f81\uff0c\u5e76\u5c06\u6570\u636e\u5e27\u5212\u5206\u4e3a\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6 \"\"\" url_vectorizer = TfidfVectorizer ( tokenizer = url_tokenize ) url_vectorizer_save = copy . deepcopy ( url_vectorizer ) x = url_vectorizer . fit_transform ( grey_urls ) x_train , x_test , y_train , y_test = train_test_split ( x , y , test_size = 0.2 , random_state = 42 ) \"\"\" \u5bf9\u6570\u636e\u5e27\u6267\u884c\u903b\u8f91\u56de\u5f52\uff0c\u5c06\u62df\u5408\u540e\u7684\u6a21\u578b\u548c\u5411\u91cf\u4fdd\u5b58 \"\"\" # \u5bf9\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u6267\u884c\u903b\u8f91\u56de\u5f52 l_regress = LogisticRegression ( solver = 'liblinear' ) l_regress . fit ( x_train , y_train ) l_score = l_regress . score ( x_test , y_test ) print ( \"\u6d4b\u8bd5\u62df\u5408\u5206\u6570\u4e3a\uff1a {0} \" . format ( l_score )) file_mode = \"../../model/model-0x3/model.pkl\" dump_model_object ( file_mode , l_regress ) file_vector = \"../../model/model-0x3/vector.pl\" dump_model_object ( file_vector , url_vectorizer_save )","title":"\u5b8c\u6574\u4ee3\u7801"},{"location":"0x3_%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%81%B6%E6%84%8FURL%E6%A3%80%E6%B5%8B/#_11","text":"","title":"\u6982\u5ff5\u8865\u5145"},{"location":"0x3_%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%81%B6%E6%84%8FURL%E6%A3%80%E6%B5%8B/#_12","text":"\u903b\u8f91\u56de\u5f52\u6a21\u578b\u901a\u8fc7\u903b\u8f91\u51fd\u6570\u5bf9\u6570\u636e\u8fdb\u884c \u5206\u7c7b \uff0c\u901a\u5e38\u5305\u62ec\u7528\u4e8e\u4f30\u8ba1\u903b\u8f91\u6a21\u578b\u7ed3\u679c\u7684\u72ec\u7acb\u4e8c\u5143\u53d8\u91cf\u3002\u76f8\u6bd4\u4e8e\u7ebf\u6027\u56de\u5f52\uff0c\u903b\u8f91\u56de\u5f52\u5904\u7406\u7684\u5206\u7c7b\u95ee\u9898\uff0c\u8f93\u51fa\u7684\u7ed3\u679c\u4e3a\u79bb\u6563\u503c\uff1b\u800c\u7ebf\u6027\u56de\u5f52\u89e3\u51b3\u7684\u662f\u56de\u5f52\u95ee\u9898\u8f93\u51fa\u7684\u662f\u8fde\u7eed\u503c\u3002 \u8be6\u7ec6\u89e3\u8bfb\u53ef\u4ee5\u53c2\u8003\u6587\u7ae0[1]\uff0c\u6ce8\u610f\uff0c\u867d\u7136\u8be5\u7b97\u6cd5\u5728\u7528\u8d77\u6765\u65f6\u663e\u5f97\u975e\u5e38\u7b80\u5355\uff0c\u4f46\u662f\u5176\u539f\u7406\u4e2d\u7684\u7ec6\u8282\u90e8\u5206\u8fd8\u662f\u5f88\u591a\u7684\uff0c\u611f\u5174\u8da3\u53ef\u4ee5\u4ed4\u7ec6\u7814\u7a76\u4e00\u4e0b\u3002","title":"\u903b\u8f91\u56de\u5f52"},{"location":"0x3_%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%81%B6%E6%84%8FURL%E6%A3%80%E6%B5%8B/#svm","text":"\u652f\u6301\u5411\u91cf\u673a\uff08Surport Vector Machine, SVM\uff09\u540c\u6837\u7528\u4e8e\u5206\u7c7b\uff0c\u662f\u4e00\u4e2a\u4e8c\u5143\u5206\u7c7b\u7b97\u6cd5\uff0c\u4f46\u4fee\u6539\u540e\u4e5f\u652f\u6301\u591a\u5206\u7c7b\u95ee\u9898\u3002\u652f\u6301\u5411\u91cf\u673a\u901a\u8fc7\u5728\u9ad8\u7ef4\u7a7a\u95f4\u4e2d\u521b\u5efa\u6700\u4f73\u8d85\u5e73\u9762\u6765\u5b9e\u73b0\uff0c\u8fd9\u4e2a\u8d85\u5e73\u9762\u521b\u5efa\u7684\u5212\u5206\u88ab\u79f0\u4e3a\u7c7b\u3002 \u5bf9\u4e8e\u5206\u7c7b\u95ee\u9898\u672c\u8d28\u7684\u7406\u89e3\uff0c\u5c31\u662f\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u5212\u5206\u7684\u8d85\u5e73\u9762\uff0c\u8ba9\u6570\u636e\u5c3d\u53ef\u80fd\u591a\u5730\u5206\u5e03\u5728\u8fd9\u4e2a\u5e73\u9762\u7684\u4e24\u4fa7\uff0c\u4ece\u800c\u5b9e\u73b0\u5206\u7c7b\u7684\u6548\u679c\u3002\u4f46\u5728\u5b9e\u9645\u6570\u636e\u4e0b\uff0c\u5f80\u5f80\u5b58\u5728\u591a\u4e2a\u8d85\u5e73\u9762\uff0c\u90a3\u4e48\u6b64\u65f6\u6211\u4eec\u600e\u4e48\u53d6\u820d\u5462\uff1f\u5c31\u662f\u6bd4\u8f83\u5bb9\u6613\u5206\u7c7b\u9519\u8bef\u7684\u6570\u636e\u70b9\uff0c\u800c\u8fd9\u4e9b\u70b9\u5c31\u662f\u79bb\u5e73\u9762\u5f88\u8fd1\u7684\u70b9\uff0c\u56e0\u4e3a\u79bb\u5e73\u9762\u5f88\u8fdc\u7684\u70b9\u662f\u76f8\u5dee\u5f88\u5927\u7684\uff0c\u57fa\u672c\u4e0d\u4f1a\u5b58\u5728\u5206\u7c7b\u9519\u8bef\u7684\u60c5\u51b5\u3002\u800cSVM\u7684\u6838\u5fc3\u601d\u60f3\u5c31\u662f\u5982\u6b64\uff0c\u627e\u5230\u79bb\u5e73\u9762\u5f88\u8fd1\u7684\u3001\u5bb9\u6613\u5206\u7c7b\u9519\u8bef\u7684\u70b9\uff0c\u7136\u540e\u60f3\u529e\u6cd5\u8ba9\u8fd9\u4e9b\u6570\u636e\u70b9\u79bb\u5e73\u9762\u8ddd\u79bb\u53d8\u8fdc\u3002\u90a3\u4e9b\u79bb\u8d85\u5e73\u9762\u5f88\u8fd1\u7684\u70b9\u4e5f\u5c31\u88ab\u79f0\u4e3a\u652f\u6301\u5411\u91cf\uff08Support Vector\uff09\u3002 \u8be6\u7ec6\u7684\u6570\u5b66\u539f\u7406\uff0c\u53ef\u4ee5\u53c2\u8003\u6587\u7ae0[2]\uff0c\u8be5\u7b97\u6cd5\u6709\u6bd4\u8f83\u5b8c\u5907\u7684\u6570\u5b66\u7406\u8bba\u652f\u6491\u7684\uff0c\u4f46\u8be6\u7ec6\u7684\u6570\u7406\u548c\u63a8\u5012\u4e5f\u76f8\u5bf9\u6bd4\u8f83\u590d\u6742\uff0c\u56e0\u6b64\u4e5f\u53ef\u4ee5\u770b\u81ea\u5df1\u9700\u8981\u8fdb\u884c\u5b66\u4e60\uff08~~\u5176\u5b9e\u5c31\u662f\u6211\u770b\u4e0d\u61c2\uff0c\u4e0d\u732e\u4e11\u6765\u63a8\u5bfc\u4e86~~\uff09\u3002","title":"\u652f\u6301\u5411\u91cf\u673a\uff08SVM\uff09"},{"location":"0x3_%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%81%B6%E6%84%8FURL%E6%A3%80%E6%B5%8B/#reference","text":"[1]\u3010\u673a\u5668\u5b66\u4e60\u3011\u903b\u8f91\u56de\u5f52\uff08\u975e\u5e38\u8be6\u7ec6\uff09\uff0c \u963f\u6cfd \uff0chttps://zhuanlan.zhihu.com/p/74874291 [2] 05 SVM - \u652f\u6301\u5411\u91cf\u673a - \u6982\u5ff5\u3001\u7ebf\u6027\u53ef\u5206\uff0c \u767d\u5c14\u6469\u65af \uff0chttps://www.jianshu.com/p/410a56129757","title":"Reference"}]}